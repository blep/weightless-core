Changeset created on Thu Jun  3 12:22:04 CEST 2010 by Seek You Too

Description: Suspend and resume for HttpServer connection handling

    Reactor can now suspend and resume readers and writers.

    The HttpServer can use this new feature by letting the generators
    produced by the HttpServer's generatorFactory yield the new Suspend
    object. HttpServer will then suspend the current writeResponse action.
    The same object can be used to resume this write process.

Baseline version: weightless/tags/version_0.4.9

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/test/alltests.py version_0.4.10/test/alltests.py
--- version_0.4.9/test/alltests.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/test/alltests.py	2010-06-03 12:20:18.000000000 +0200
@@ -1,9 +1,8 @@
 #!/usr/bin/env python2.5
-
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
-#    Copyright (C) 2006-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2010 Seek You Too (CQ2) http://www.cq2.nl
 #
 #    This file is part of Weightless
 #
@@ -22,8 +21,6 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-#
-from platform import python_version
 from glob import glob
 import os, sys
 
@@ -32,24 +29,20 @@
 
 sys.path.insert(0, '..')
 
-import unittest
+from unittest import main
 
-# Python >= 2.4
 from acceptortest import AcceptorTest
-from reactortest import ReactorTest
+from composetest import ComposeTest
 from httpreadertest import HttpReaderTest
 from httpservertest import HttpServerTest
-from httpsservertest import HttpsServerTest
-from transparentsockettest import TransparentSocketTest
 from httpspectest import HttpSpecTest
+from httpsservertest import HttpsServerTest
 from localtest import LocalTest
-
-if python_version() >= "2.5":
-    from composetest import ComposeTest
-    from snaketest import SnakeTest
-    from servertestcasetest import ServerTestCaseTest
-else:
-    print 'Skipping Python 2.5 tests.'
+from reactortest import ReactorTest
+from servertestcasetest import ServerTestCaseTest
+from snaketest import SnakeTest
+from suspendtest import SuspendTest
+from transparentsockettest import TransparentSocketTest
 
 if __name__ == '__main__':
-    unittest.main()
+    main()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/test/composetest.py version_0.4.10/test/composetest.py
--- version_0.4.9/test/composetest.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/test/composetest.py	2010-06-03 12:20:18.000000000 +0200
@@ -1,4 +1,3 @@
-#!/usr/bin/env python2.5
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
@@ -599,9 +598,9 @@
         def f2():
             yield f1()
         c = compose(f2())
-        result = """  File "%s", line 600, in f2
+        result = """  File "%s", line 599, in f2
     yield f1()
-  File "%s", line 598, in f1
+  File "%s", line 597, in f1
     yield""" % (2*(__file__.replace('pyc', 'py'),))
         c.next()
         self.assertEquals(result, tostring(c))
@@ -613,7 +612,7 @@
         def f2():
             yield f1()
         c = compose(f2())
-        result = """  File "%s", line 613, in f2
+        result = """  File "%s", line 612, in f2
     def f2():""" % __file__.replace('pyc', 'py')
         self.assertEquals(result, tostring(c))
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/test/reactortest.py version_0.4.10/test/reactortest.py
--- version_0.4.9/test/reactortest.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/test/reactortest.py	2010-06-03 12:20:18.000000000 +0200
@@ -1,4 +1,3 @@
-#!/usr/bin/env python2.5
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
@@ -21,7 +20,7 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-#
+
 from unittest import TestCase
 from cq2utils.calltrace import CallTrace
 from time import time, sleep
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/test/suspendtest.py version_0.4.10/test/suspendtest.py
--- version_0.4.9/test/suspendtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_0.4.10/test/suspendtest.py	2010-06-03 12:20:18.000000000 +0200
@@ -0,0 +1,191 @@
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from unittest import TestCase
+from cq2utils import CallTrace
+
+from weightless import Reactor, Suspend, HttpServer
+
+class MockSocket(object):
+    def close(self):
+        self.closed = True
+
+def mockselect(readers, writers, x, timeout):
+    return readers, writers, x
+
+class SuspendTest(TestCase):
+
+    def testReactorSuspend(self):
+        handle = ['initial value']
+        reactor = Reactor(select_func=mockselect)
+        def callback():
+            handle[0] = reactor.suspend()
+        sok = MockSocket()
+        reactor.addReader(sok, callback)
+        self.assertTrue(sok in reactor._readers)
+        reactor.step()
+        self.assertTrue(sok not in reactor._readers)
+
+        sok = MockSocket()
+        reactor.addWriter(sok, callback)
+        self.assertTrue(sok in reactor._writers)
+        reactor.step()
+        self.assertTrue(sok not in reactor._writers)
+        self.assertTrue(handle[0] != None)
+        self.assertTrue(handle[0] != 'initial value')
+
+    def testReactorResumeReader(self):
+        handle = ['initial value']
+        reactor = Reactor(select_func=mockselect)
+        def callback():
+            handle[0] = reactor.suspend()
+            yield
+            handle.append('resumed')
+            yield
+        sok = MockSocket()
+        reactor.addReader(sok, callback().next)
+        reactor.step()
+        reactor.resumeReader(handle[0])
+        reactor.step()
+        self.assertEquals('resumed', handle[1])
+        self.assertTrue(sok not in reactor._writers)
+        self.assertTrue(sok in reactor._readers)
+        self.assertRaises(KeyError, reactor.resumeReader, handle[0])
+
+    def testReactorResumeWriter(self):
+        handle = ['initial value']
+        reactor = Reactor(select_func=mockselect)
+        def callback():
+            handle[0] = reactor.suspend()
+            yield
+            yield
+        sok = MockSocket()
+        reactor.addWriter(sok, callback().next)
+        reactor.step()
+        reactor.resumeWriter(handle[0])
+        reactor.step()
+        self.assertTrue(sok in reactor._writers)
+        self.assertTrue(sok not in reactor._readers)
+        self.assertRaises(KeyError, reactor.resumeReader, handle[0])
+        self.assertRaises(KeyError, reactor.resumeWriter, handle[0])
+
+    def testWrongUseAfterSuspending(self):
+        reactor = Reactor(select_func=mockselect)
+        handle = ['initial value']
+        def callback():
+            handle[0] = reactor.suspend()
+        sok = MockSocket()
+        reactor.addWriter(sok, callback)
+        reactor.step()
+        self.assertEquals(sok, handle[0])
+        try:
+            reactor.addWriter(sok, callback)
+            self.fail("Exception not raised")
+        except ValueError, e:
+            self.assertEquals('Socket is suspended', str(e))
+        try:
+            reactor.addReader(sok, callback)
+            self.fail("Exception not raised")
+        except ValueError, e:
+            self.assertEquals('Socket is suspended', str(e))
+
+    def testShutdownReactor(self):
+        reactor = Reactor(select_func=mockselect)
+        sok1 = MockSocket()
+        sok2 = MockSocket()
+        sok3 = MockSocket()
+        def callback():
+            reactor.suspend()
+        reactor.addReader(sok1, lambda: None)
+        reactor.addWriter(sok2, lambda: None)
+        reactor.addReader(sok3, callback)
+        reactor.step()
+        reactor.shutdown() 
+        self.assertTrue(sok1.closed)
+        self.assertTrue(sok2.closed)
+        self.assertTrue(sok3.closed)
+
+    def XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxtestIntegration(self):
+        d = {}
+        def someAction(identifier):
+            yield 'a'
+            # triggerAsynchronousProccesing()
+            s = Suspend()
+            d[identifier] = s
+            yield s # wait for asynchronous proccess to finish
+            yield 'b'
+        def asynchronousProcessFinished(identifier):
+            d[identifier].resume()
+
+    def testSuspendProtocol(self):
+        data = []
+        class MyMockSocket(object):
+            def accept(self):
+                return MyMockSocket(), None
+            def setsockopt(self, *args):
+                pass
+            def recv(selfl, *args):
+                return 'GET / HTTP/1.0\r\n\r\n'
+            def getpeername(self):
+                return 'itsme'
+            def shutdown(self, *args):
+                pass
+            def close(self):
+                pass
+            def send(self, chunk, options):
+                data.append(chunk)
+                return len(chunk)
+        reactor = Reactor(select_func=mockselect)
+        suspend = Suspend()
+        def handler(**httpvars):
+            yield 'before suspend'
+            yield suspend
+            yield 'after suspend'
+        listener = MyMockSocket()
+        httpserver = HttpServer(reactor, 9, handler, sok=listener)
+        reactor.removeReader(listener) # avoid new connections
+        httpserver._accept()
+        reactor.step()
+        reactor.step()
+        self.assertEquals(1, len(reactor._writers))
+        reactor.step()
+        self.assertEquals(reactor, suspend._reactor)
+        self.assertEquals(0, len(reactor._writers))
+        suspend.resumeWriter()
+        reactor.step()
+        self.assertEquals(['before suspend', 'after suspend'], data)
+
+    def testResumeReader(self):
+        class MockReactor(object):
+            def suspend(inner):
+                return "handle"
+            def resumeReader(inner, handle):
+                inner.resumeReaderArgs = handle
+        suspend = Suspend()
+       
+        reactor = MockReactor()
+
+        suspend(reactor)
+        suspend.resumeReader()
+
+        self.assertEquals("handle", reactor.resumeReaderArgs)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/weightless/_httpserver.py version_0.4.10/weightless/_httpserver.py
--- version_0.4.9/weightless/_httpserver.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/weightless/_httpserver.py	2010-06-03 12:20:18.000000000 +0200
@@ -2,7 +2,7 @@
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
-#    Copyright (C) 2006-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2010 Seek You Too (CQ2) http://www.cq2.nl
 #
 #    This file is part of Weightless
 #
@@ -248,6 +248,9 @@
                 data = self._rest
             else:
                 data = self._handler.next()
+            if callable(data):
+                data(self._reactor)
+                return
             sent = self._sok.send(data, MSG_DONTWAIT)
             if sent < len(data):
                 self._rest = data[sent:]
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/weightless/__init__.py version_0.4.10/weightless/__init__.py
--- version_0.4.9/weightless/__init__.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/weightless/__init__.py	2010-06-03 12:20:18.000000000 +0200
@@ -35,5 +35,6 @@
 from _httpreader import HttpReader, Connector
 from _httpserver import HttpServer, HttpsServer
 from _local import local
+from _suspend import Suspend
 
 from _gutils import tostring
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/weightless/_reactor.py version_0.4.10/weightless/_reactor.py
--- version_0.4.9/weightless/_reactor.py	2010-06-01 11:57:31.000000000 +0200
+++ version_0.4.10/weightless/_reactor.py	2010-06-03 12:20:18.000000000 +0200
@@ -2,7 +2,7 @@
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
-#    Copyright (C) 2006-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2010 Seek You Too (CQ2) http://www.cq2.nl
 #
 #    This file is part of Weightless
 #
@@ -66,6 +66,7 @@
     def __init__(self, select_func = select):
         self._readers = {}
         self._writers = {}
+        self._suspended = {}
         self._timers = []
         self._select = select_func
         self._prio = 0
@@ -76,6 +77,8 @@
             prio = Reactor.DEFAULTPRIO
         if not 0 <= prio < Reactor.MAXPRIO:
             raise ValueError('Invalid priority: %s' % prio)
+        if sok in self._suspended:
+            raise ValueError('Socket is suspended')
         self._readers[sok] = Context(sink, prio)
 
     def addWriter(self, sok, source, prio=None):
@@ -84,6 +87,8 @@
             prio = Reactor.DEFAULTPRIO
         if not 0 <= prio < Reactor.MAXPRIO:
             raise ValueError('Invalid priority: %s' % prio)
+        if sok in self._suspended:
+            raise ValueError('Socket is suspended')
         self._writers[sok] = Context(source, prio)
 
     def addTimer(self, seconds, callback):
@@ -102,9 +107,22 @@
     def removeTimer(self, token):
         self._timers.remove(token)
 
+    def suspend(self):
+        self._readers.pop(self.currentsok, None)
+        self._writers.pop(self.currentsok, None)
+        self._suspended[self.currentsok] = self.currentcontext
+        return self.currentsok
+
+    def resumeReader(self, handle):
+        self._readers[handle] = self._suspended.pop(handle)
+
+    def resumeWriter(self, handle):
+        self._writers[handle] = self._suspended.pop(handle)
+
     def shutdown(self):
         for sok in self._readers: sok.close()
         for sok in self._writers: sok.close()
+        for sok in self._suspended: sok.close()
 
     def loop(self):
         try:
@@ -163,10 +181,10 @@
         return len(self._readers) + len(self._writers)
 
     def _callback(self, ready, soks):
-        for sok in ready:
-            if sok in soks:
+        for self.currentsok in ready:
+            if self.currentsok in soks:
                 try:
-                    context = soks[sok]
+                    context = soks[self.currentsok]
                     if context.prio <= self._prio:
                         self.currentcontext = context
                         context.callback()
@@ -174,8 +192,8 @@
                     raise
                 except:
                     print_exc()
-                    if sok in soks:
-                        del soks[sok]
+                    if self.currentsok in soks:
+                        del soks[self.currentsok]
 
     def _findAndRemoveBadFd(self):
         for sok in self._readers:
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.9/weightless/_suspend.py version_0.4.10/weightless/_suspend.py
--- version_0.4.9/weightless/_suspend.py	1970-01-01 01:00:00.000000000 +0100
+++ version_0.4.10/weightless/_suspend.py	2010-06-03 12:20:18.000000000 +0200
@@ -0,0 +1,33 @@
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+class Suspend(object):
+    def __call__(self, reactor):
+        self._handle = reactor.suspend()
+        self._reactor = reactor
+
+    def resumeWriter(self):
+        self._reactor.resumeWriter(self._handle)
+
+    def resumeReader(self):
+        self._reactor.resumeReader(self._handle)
