Changeset created on Fri Jun 17 13:51:07 CEST 2011 by Seek You Too

Description: Fixed a bug caused by DECREF on a temporary variable

    When a composed generator finishes with StopIteration(a, ...), and the values a0, ... are not used, it caused a segfault.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.5.0-CQ2/version_1

diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_1/test/composetest.py version_1-merge_trunk/test/composetest.py
--- version_1/test/composetest.py	2011-06-08 13:42:12.000000000 +0200
+++ version_1-merge_trunk/test/composetest.py	2011-06-17 13:47:11.000000000 +0200
@@ -1039,6 +1039,20 @@
         except RuntimeError, e:
             self.assertEquals('maximum recursion depth exceeded (compose)', str(e))
 
+    def testDECREF_in_compose_clear(self):
+        """A bit strange, but this triggers a bug with 
+        DECREF(<temporary>) in compose_clear()"""
+        def f():
+            msg = yield
+            raise StopIteration(*msg.split())
+
+        r = compose(f())
+        r.next()
+        try:
+            r.send("ab an")
+        except StopIteration, e:
+            self.assertEquals((), e.args)
+
     def testSelftest(self):
         from weightless.core.compose._compose_c import _selftest
         _selftest()
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_1/weightless/core/compose/_compose.c version_1-merge_trunk/weightless/core/compose/_compose.c
--- version_1/weightless/core/compose/_compose.c	2011-06-17 13:32:02.000000000 +0200
+++ version_1-merge_trunk/weightless/core/compose/_compose.c	2011-06-17 13:43:45.000000000 +0200
@@ -171,8 +171,10 @@
     free(self->generators_base);
     self->generators_base = NULL;
 
-    while(self->messages_base && !messages_empty(self))
-        Py_DECREF(messages_next(self));
+    while(self->messages_base && !messages_empty(self)) {
+        PyObject* p = messages_next(self);
+        Py_DECREF(p);
+    }
 
     free(self->messages_base);
     self->messages_base = NULL;
