Changeset created on Wed Jun 23 20:33:15 CEST 2010 by Seek You Too

Description: Added asynchronous httpget generator

    Added support for an asynchronous HTTP GET request using a generator
    in combination with HttpServer. The current generator is suspended
    until a response is returned from the HTTP GET request.

    This also changed the Suspend protocol introduced in version 0.4.11. 
    Suspended generator will now always result in resuming as writer, see
    the test in SuspendTest.testSuspendProtocol (suspendtest.py line 110)

Baseline version: weightless/tags/version_0.4.11

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/test/alltests.py version_0.4.12/test/alltests.py
--- version_0.4.11/test/alltests.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/test/alltests.py	2010-06-23 20:32:29.000000000 +0200
@@ -43,6 +43,7 @@
 from snaketest import SnakeTest
 from suspendtest import SuspendTest
 from transparentsockettest import TransparentSocketTest
+from asyncreadertest import AsyncReaderTest
 
 if __name__ == '__main__':
     main()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/test/asyncreadertest.py version_0.4.12/test/asyncreadertest.py
--- version_0.4.11/test/asyncreadertest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_0.4.12/test/asyncreadertest.py	2010-06-23 20:32:29.000000000 +0200
@@ -0,0 +1,78 @@
+from unittest import TestCase
+from socket import socket, gaierror as SocketGaiError
+from random import randint
+from httpreadertest import server as testserver
+from weightless import HttpServer, httpget, Reactor, compose
+
+def clientget(host, port, path):
+    client = socket()
+    client.connect((host,  port))
+    client.send('GET %s HTTP/1.1\r\n\r\n' % path)
+    return client
+ 
+class AsyncReaderTest(TestCase):
+
+    def dispatch(self, *args, **kwargs):
+        return compose(self.handler(*args, **kwargs))
+
+    def setUp(self):
+        self.reactor = Reactor()
+        self.port = randint(2**10, 2**16)
+        self.httpserver = HttpServer(self.reactor, self.port, self.dispatch)
+
+    def testPassRequestThruToBackOfficeServer(self):
+        done = [False]
+        backofficeport = self.port + 1
+        def passthruhandler(*args, **kwargs):
+            request = kwargs['RequestURI']
+            response = yield httpget('localhost', backofficeport, request)
+            yield response
+            done[0] = True
+        self.handler = passthruhandler
+        requests = []
+        responses = (i for i in ['hel', 'lo!'])
+        backofficeserver = testserver(backofficeport, responses, requests)
+        client = clientget('localhost', self.port, '/depot?arg=1&arg=2')
+        while not done[0]:
+            self.reactor.step()
+        response = client.recv(99)
+        self.assertEquals('hello!', response)
+        self.assertEquals('GET /depot?arg=1&arg=2 HTTP/1.1\r\n\r\n', requests[0])
+
+    def testConnectFails(self):
+        exceptions = []
+        def failingserver(*args, **kwarg):
+            try:
+                response = yield httpget(*target)
+            except Exception, e:
+                exceptions.append(e)
+        self.handler = failingserver
+
+        clientget('localhost', self.port, '/')
+        target = ('localhost', 'port', '/') # non-numeric port
+        while not exceptions:
+            self.reactor.step()
+        self.assertEquals(TypeError, type(exceptions[0]))
+
+        target = ('localhost', 87, '/') # invalid port
+        clientget('localhost', self.port, '/')
+        exceptions = []
+        while not exceptions:
+            self.reactor.step()
+        self.assertEquals(IOError, type(exceptions[0]))
+
+        target = ('UEYR^$*FD(#>NDJ.khfd9.(*njnd', 9876, '/') # invalid host
+        clientget('localhost', self.port, '/')
+        exceptions = []
+        while not exceptions:
+            self.reactor.step()
+        self.assertEquals(SocketGaiError, type(exceptions[0]))
+
+        target = ('127.0.0.255', 9876, '/')
+        clientget('localhost', self.port, '/')
+        exceptions = []
+        while not exceptions:
+            self.reactor.step()
+        self.assertEquals(IOError, type(exceptions[0]))
+        self.assertEquals(111, exceptions[0].message)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/test/httpreadertest.py version_0.4.12/test/httpreadertest.py
--- version_0.4.11/test/httpreadertest.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/test/httpreadertest.py	2010-06-23 20:32:29.000000000 +0200
@@ -46,7 +46,11 @@
         if response:
             for i in xrange(loop):
                 request.append(newSok.recv(4096))
-            newSok.send(response)
+            if hasattr(response, 'next'):
+                for r in response:
+                    newSok.send(r)
+            else:
+                newSok.send(response)
             sleep(delay)
             newSok.close()
         else:
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/test/suspendtest.py version_0.4.12/test/suspendtest.py
--- version_0.4.11/test/suspendtest.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/test/suspendtest.py	2010-06-23 20:32:29.000000000 +0200
@@ -53,24 +53,6 @@
         self.assertTrue(handle[0] != None)
         self.assertTrue(handle[0] != 'initial value')
 
-    def testReactorResumeReader(self):
-        handle = ['initial value']
-        reactor = Reactor(select_func=mockselect)
-        def callback():
-            handle[0] = reactor.suspend()
-            yield
-            handle.append('resumed')
-            yield
-        sok = MockSocket()
-        reactor.addReader(sok, callback().next)
-        reactor.step()
-        reactor.resumeReader(handle[0])
-        reactor.step()
-        self.assertEquals('resumed', handle[1])
-        self.assertTrue(sok not in reactor._writers)
-        self.assertTrue(sok in reactor._readers)
-        self.assertRaises(KeyError, reactor.resumeReader, handle[0])
-
     def testReactorResumeWriter(self):
         handle = ['initial value']
         reactor = Reactor(select_func=mockselect)
@@ -85,7 +67,6 @@
         reactor.step()
         self.assertTrue(sok in reactor._writers)
         self.assertTrue(sok not in reactor._readers)
-        self.assertRaises(KeyError, reactor.resumeReader, handle[0])
         self.assertRaises(KeyError, reactor.resumeWriter, handle[0])
 
     def testWrongUseAfterSuspending(self):
@@ -117,51 +98,26 @@
             reactor.suspend()
         reactor.addReader(sok1, lambda: None)
         reactor.addWriter(sok2, lambda: None)
-        reactor.addReader(sok3, callback)
+        reactor.addWriter(sok3, callback)
         reactor.step()
+        self.assertFalse(sok3 in reactor._readers)
+        self.assertFalse(sok3 in reactor._writers)
         reactor.shutdown() 
         self.assertTrue(sok1.closed)
         self.assertTrue(sok2.closed)
         self.assertTrue(sok3.closed)
 
-    def XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxtestIntegration(self):
-        d = {}
-        def someAction(identifier):
-            yield 'a'
-            # triggerAsynchronousProccesing()
-            s = Suspend()
-            d[identifier] = s
-            yield s # wait for asynchronous proccess to finish
-            yield 'b'
-        def asynchronousProcessFinished(identifier):
-            d[identifier].resume()
-
     def testSuspendProtocol(self):
-        data = []
-        class MyMockSocket(object):
-            def accept(self):
-                return MyMockSocket(), None
-            def setsockopt(self, *args):
-                pass
-            def recv(selfl, *args):
-                return 'GET / HTTP/1.0\r\n\r\n'
-            def getpeername(self):
-                return 'itsme'
-            def shutdown(self, *args):
-                pass
-            def close(self):
-                pass
-            def send(self, chunk, options):
-                data.append(chunk)
-                return len(chunk)
         reactor = Reactor(select_func=mockselect)
         suspend = Suspend()
         def handler(**httpvars):
             yield 'before suspend'
             yield suspend
+            yield "result = %s" % suspend.getResult()
             yield 'after suspend'
         listener = MyMockSocket()
-        httpserver = HttpServer(reactor, 9, handler, sok=listener)
+        port = 9
+        httpserver = HttpServer(reactor, port, handler, sok=listener)
         reactor.removeReader(listener) # avoid new connections
         httpserver._accept()
         reactor.step()
@@ -170,50 +126,96 @@
         reactor.step()
         self.assertEquals(reactor, suspend._reactor)
         self.assertEquals(0, len(reactor._writers))
-        suspend.resumeWriter()
+        suspend.resume('RESPONSE')
+        reactor.step()
+        reactor.step()
         reactor.step()
-        self.assertEquals(['before suspend', 'after suspend'], data)
+        self.assertEquals(['before suspend', 'result = RESPONSE', 'after suspend'], listener.data)
 
-    def testStateWriter(self):
-        reactor = CallTrace('reactor')
-        s = Suspend()
-        s(reactor)
-        s.resumeReader(state='state')
-        self.assertEquals('state', s.state)
+    def testSuspendProtocolWithThrow(self):
+        reactor = Reactor(select_func=mockselect)
+        suspend = Suspend()
+        def handler(**httpvars):
+            yield 'before suspend'
+            yield suspend
+            try:
+                suspend.getResult()
+                self.fail()
+            except ValueError, e:
+                yield "result = %s" % repr(e)
+            yield 'after suspend'
+        listener = MyMockSocket()
+        port = 9
+        httpserver = HttpServer(reactor, port, handler, sok=listener)
+        reactor.removeReader(listener) # avoid new connections
+        httpserver._accept()
+        reactor.step()
+        reactor.step()
+        self.assertEquals(1, len(reactor._writers))
+        reactor.step()
+        self.assertEquals(reactor, suspend._reactor)
+        self.assertEquals(0, len(reactor._writers))
+        suspend.throw(ValueError('BAD VALUE'))
+        reactor.step()
+        reactor.step()
+        reactor.step()
+        self.assertEquals(['before suspend', "result = ValueError('BAD VALUE',)", 'after suspend'], listener.data)
 
-    def testStateWriter(self):
+    def testGetResult(self):
         reactor = CallTrace('reactor')
         s = Suspend()
-        s(reactor)
-        s.resumeWriter(state='state')
-        self.assertEquals('state', s.state)
+        s(reactor, whenDone=lambda:None)
+        s.resume('state')
+        self.assertEquals('state', s.getResult())
 
-    def testNoStateReader(self):
+    def testGetNoneResult(self):
         reactor = CallTrace('reactor')
         s = Suspend()
-        s(reactor)
-        s.resumeReader()
-        self.assertEquals(None, s.state)
+        s(reactor, whenDone=lambda:None)
+        s.resume()
+        self.assertEquals(None, s.getResult())
 
-    def testNoStateWriter(self):
+    def testGetResultRaisesException(self):
         reactor = CallTrace('reactor')
         s = Suspend()
-        s(reactor)
-        s.resumeWriter()
-        self.assertEquals(None, s.state)
-
-    def testResumeReader(self):
-        class MockReactor(object):
-            def suspend(inner):
-                return "handle"
-            def resumeReader(inner, handle):
-                inner.resumeReaderArgs = handle
-        suspend = Suspend()
-       
-        reactor = MockReactor()
-
-        suspend(reactor)
-        suspend.resumeReader()
-
-        self.assertEquals("handle", reactor.resumeReaderArgs)
+        s(reactor, whenDone=lambda:None)
+        s.throw(ValueError('bad value'))
+        self.assertRaises(ValueError, s.getResult)
 
+    def testCleanUp(self):
+        reactor = Reactor(select_func=mockselect)
+        def handler():
+            reactor.suspend()
+            yield
+        reactor.addWriter(1, lambda: None)
+        reactor.addReader(2, lambda: None)
+        reactor.addReader(3, handler().next)
+        reactor.step()
+        self.assertTrue(1 in reactor._writers)
+        reactor.cleanup(1)
+        self.assertFalse(1 in reactor._writers)
+        self.assertTrue(2 in reactor._readers)
+        reactor.cleanup(2)
+        self.assertFalse(2 in reactor._readers)
+        self.assertTrue(3 in reactor._suspended)
+        reactor.cleanup(3)
+        self.assertFalse(3 in reactor._suspended)
+
+class MyMockSocket(object):
+    def __init__(self, data=None):
+        self.data = [] if data is None else data
+    def accept(self):
+        return MyMockSocket(self.data), None
+    def setsockopt(self, *args):
+        pass
+    def recv(self, *args):
+        return 'GET / HTTP/1.0\r\n\r\n'
+    def getpeername(self):
+        return 'itsme'
+    def shutdown(self, *args):
+        pass
+    def close(self):
+        pass
+    def send(self, chunk, options):
+        self.data.append(chunk)
+        return len(chunk)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/weightless/_httpget.py version_0.4.12/weightless/_httpget.py
--- version_0.4.11/weightless/_httpget.py	1970-01-01 01:00:00.000000000 +0100
+++ version_0.4.12/weightless/_httpget.py	2010-06-23 20:32:29.000000000 +0200
@@ -0,0 +1,50 @@
+from weightless import Suspend, identify
+from socket import socket, error as SocketError, SOL_SOCKET, SO_ERROR
+from errno import EINPROGRESS
+
+@identify
+def doGet(host, port, request):
+    this = yield # this generator, from @identify
+    suspend = yield # suspend object, from Suspend.__call__
+    sok = socket()
+    sok.setblocking(0)
+    #sok.settimeout(1.0)
+    try:
+        sok.connect((host, port))
+    except SocketError, (errno, msg):
+        if errno != EINPROGRESS:
+            raise
+    suspend._reactor.addWriter(sok, this.next)
+    yield
+    try:
+        err = sok.getsockopt(SOL_SOCKET, SO_ERROR)
+        if err != 0:    # connection created succesfully?
+            raise IOError(err)
+        yield
+        suspend._reactor.removeWriter(sok)
+        # sendall() of loop gebruiken
+        # error checking
+        sok.send('GET %s HTTP/1.1\r\n\r\n' % request) # + Host of HTTP 1.0
+        #sok.shutdown(WRITER)
+        suspend._reactor.addReader(sok, this.next)
+        responses = []
+        while True:
+            yield
+            response = sok.recv(4096) # error checking
+            if response == '':
+                break
+            responses.append(response)
+        suspend._reactor.removeReader(sok)
+        #sok.shutdown(READER)
+        sok.close()
+        suspend.resume(''.join(responses))
+    except Exception, e:
+        suspend.throw(e)
+    yield
+
+
+def httpget(host, port, request):
+    s = Suspend(doGet(host, port, request).send)
+    data = yield s
+    result = s.getResult()
+    raise StopIteration(result)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/weightless/_httpserver.py version_0.4.12/weightless/_httpserver.py
--- version_0.4.11/weightless/_httpserver.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/weightless/_httpserver.py	2010-06-23 20:32:29.000000000 +0200
@@ -22,6 +22,7 @@
 #
 ## end license ##
 from _acceptor import Acceptor
+from _gutils import identify
 from weightless.http import REGEXP, FORMAT, parseHeaders, parseHeader
 from socket import SHUT_RDWR, error as SocketError, MSG_DONTWAIT
 from tempfile import TemporaryFile
@@ -231,7 +232,7 @@
         self.request['Client'] = self._sok.getpeername()
         self._handler = finalizeMethod(**self.request)
         self._reactor.removeReader(self._sok)
-        self._reactor.addWriter(self._sok, self._writeResponse, prio=self._prio)
+        self._reactor.addWriter(self._sok, self._writeResponse().next, prio=self._prio)
 
     def finalize(self):
         self._finalize(self._generatorFactory)
@@ -242,28 +243,35 @@
         self._sok.shutdown(SHUT_RDWR)
         self._sok.close()
 
+    @identify
     def _writeResponse(self):
-        try:
-            if self._rest:
-                data = self._rest
-            else:
-                data = self._handler.next()
-            if callable(data):
-                data(self._reactor)
-                return
-            sent = self._sok.send(data, MSG_DONTWAIT)
-            if sent < len(data):
-                self._rest = data[sent:]
-            else:
-                self._rest = None
-        except StopIteration:
-            self._closeConnection()
-        except:
-            self._closeConnection()
-            raise
+        this = yield
+        while True:
+            yield
+            try:
+                if self._rest:
+                    data = self._rest
+                else:
+                    data = self._handler.next()
+                    if callable(data):
+                        data(self._reactor, this.next)
+                        yield
+                        data.resumeWriter()
+                        continue
+                sent = self._sok.send(data, MSG_DONTWAIT)
+                if sent < len(data):
+                    self._rest = data[sent:]
+                else:
+                    self._rest = None
+            except StopIteration:
+                self._closeConnection()
+                yield
+            except:
+                self._closeConnection()
+                raise
 
     def _closeConnection(self):
-        self._reactor.removeWriter(self._sok)
+        self._reactor.cleanup(self._sok)
 
         try:
             self._sok.shutdown(SHUT_RDWR)
@@ -280,10 +288,8 @@
         try:
             part = self._sok.recv(self._recvSize)
         except (SSL.WantReadError, SSL.WantWriteError, SSL.WantX509LookupError):
-            print "exception in read"
             pass
         except Exception, e:
-            print "EXCEPTION", str(e)
             self._closeDuringRead()
         else:
             self._dataBuffer += part
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/weightless/__init__.py version_0.4.12/weightless/__init__.py
--- version_0.4.11/weightless/__init__.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/weightless/__init__.py	2010-06-23 20:32:29.000000000 +0200
@@ -37,4 +37,6 @@
 from _local import local
 from _suspend import Suspend
 
-from _gutils import tostring
+from _gutils import tostring, identify
+
+from _httpget import httpget
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/weightless/_reactor.py version_0.4.12/weightless/_reactor.py
--- version_0.4.11/weightless/_reactor.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/weightless/_reactor.py	2010-06-23 20:32:29.000000000 +0200
@@ -107,15 +107,17 @@
     def removeTimer(self, token):
         self._timers.remove(token)
 
+    def cleanup(self, sok):
+        self._writers.pop(sok, None)
+        self._readers.pop(sok, None)
+        self._suspended.pop(sok, None)
+
     def suspend(self):
         self._readers.pop(self.currentsok, None)
         self._writers.pop(self.currentsok, None)
         self._suspended[self.currentsok] = self.currentcontext
         return self.currentsok
 
-    def resumeReader(self, handle):
-        self._readers[handle] = self._suspended.pop(handle)
-
     def resumeWriter(self, handle):
         self._writers[handle] = self._suspended.pop(handle)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.4.11/weightless/_suspend.py version_0.4.12/weightless/_suspend.py
--- version_0.4.11/weightless/_suspend.py	2010-06-15 08:23:07.000000000 +0200
+++ version_0.4.12/weightless/_suspend.py	2010-06-23 20:32:29.000000000 +0200
@@ -20,16 +20,38 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
+from traceback import print_exc
 
 class Suspend(object):
-    def __call__(self, reactor):
-        self._handle = reactor.suspend()
+    def __init__(self, doNext=lambda this: None):
+        self._doNext = doNext
+        self._exception = None
+
+    def __call__(self, reactor, whenDone):
         self._reactor = reactor
+        try:
+            self._doNext(self)
+        except Exception, e:
+            self._exception = e
+            print_exc()
+        else:
+            self._whenDone = whenDone
+            self._handle = reactor.suspend()
+
+    def resume(self, response=None):
+        self._response = response
+        self._whenDone()
+
+    def throw(self, exception):
+        self._exception = exception
+        self._whenDone()
+
+    def resumeWriter(self):
+        if hasattr(self, "_handle"):
+            self._reactor.resumeWriter(self._handle)
+
+    def getResult(self):
+        if self._exception:
+            raise self._exception
+        return self._response
 
-    def resumeWriter(self, state=None):
-        self.state = state
-        self._reactor.resumeWriter(self._handle)
-
-    def resumeReader(self, state=None):
-        self.state = state
-        self._reactor.resumeReader(self._handle)
