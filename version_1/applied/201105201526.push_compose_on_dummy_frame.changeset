Changeset created on Fri May 20 15:26:25 CEST 2011 by Seek You Too

Description: Push current compose ojbect on dummy frame object

    In the send, close and throw calls the current compose object is added to a 
    dummy frame object. This was a problem in the C code where a compose object
    has no frame like python, and so a local could not be found in the callstack.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.5.0-CQ2/version_0

Only in version_0: build
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/alltests.sh version_1/test/alltests.sh
--- version_0/test/alltests.sh	2011-02-22 14:41:16.000000000 +0100
+++ version_1/test/alltests.sh	2011-05-20 15:25:56.000000000 +0200
@@ -40,6 +40,7 @@
         shift
         test=C
 fi
+echo $test
 for pycmd in $pyversions; do
     echo "================ $pycmd _alltests.py $@ ================"
     WEIGHTLESS_COMPOSE_TEST=$test $pycmd _alltests.py "$@"
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/composetest.py version_1/test/composetest.py
--- version_0/test/composetest.py	2011-02-22 14:41:16.000000000 +0100
+++ version_1/test/composetest.py	2011-05-20 15:25:56.000000000 +0200
@@ -264,6 +264,22 @@
         g.throw(MyException('aap'))
         self.assertEquals('aap', str(self.e))
 
+    def testThrowWithLocalCorrectly(self):
+        class MyException(Exception): pass
+        def child(x):
+            try:
+                yield 1
+            except Exception, e:
+                yield f2()
+        def f2():
+            self.e = local("x")
+            yield 2
+        a = compose(child("test"))
+        g = compose(child("aap"))
+        g.next()
+        g.throw(MyException())
+        self.assertEquals('aap', str(self.e))
+
     def testHandleAllDataAndDoAvoidSuperfluousSendCalls(self):
         data = []
         def f():
@@ -301,6 +317,21 @@
         g.close()
         self.assertEquals(GeneratorExit, type(r[0]))
 
+    def testCloseWithLocalCorrectly(self):
+        class MyException(Exception): pass
+        def child(x):
+            yield f2()
+        def f2():
+            try:
+                yield 1
+            except BaseException, e:
+                self.e = local("x")
+                raise
+        g = compose(child("aap"))
+        g.next()
+        g.close()
+        self.assertEquals('aap', str(self.e))
+
     def testHandleStop(self):
         r = []
         def f():
@@ -598,11 +629,11 @@
         def f():
             yield
         g = f()
-        soll = """  File "%s", line 598, in f
+        soll = """  File "%s", line 629, in f
     def f():""" % __file__.replace('pyc', 'py')
         self.assertEquals(soll, tostring(g))
         g.next()
-        soll = """  File "%s", line 599, in f
+        soll = """  File "%s", line 630, in f
     yield""" % __file__.replace('pyc', 'py')
         self.assertEquals(soll, tostring(g))
 
@@ -613,9 +644,9 @@
         def f2():
             yield f1()
         c = compose(f2())
-        result = """  File "%s", line 614, in f2
+        result = """  File "%s", line 645, in f2
     yield f1()
-  File "%s", line 612, in f1
+  File "%s", line 643, in f1
     yield""" % (2*(__file__.replace('pyc', 'py'),))
         c.next()
         self.assertEquals(result, tostring(c), "\n%s\n!=\n%s\n" % (result, tostring(c)))
@@ -626,7 +657,7 @@
         def f2():
             yield f1()
         c = compose(f2())
-        result = """  File "%s", line 626, in f2
+        result = """  File "%s", line 657, in f2
     def f2():""" % __file__.replace('pyc', 'py')
         self.assertEquals(result, tostring(c))
 
@@ -651,16 +682,29 @@
 
     def testFindLocal(self):
         def f1():
-            f1local = 'f1'
-            yield f2()
+            someLocal = 'f1'
+            yield f3()
         def f2():
-            l = local('f1local')
+            someLocal = 'f2'
+            yield f3()
+        def f3():
+            l = local('someLocal')
             yield l
         f = compose(f1())
         result = f.next()
         self.assertEquals('f1', str(result))
+        self.assertEquals('f2', str(compose(f2()).next()))
+
+    def testFindLocalWithComposeUnassignedToVariable(self):
+        def f1():
+            f1local = 'f1'
+            yield f2()
+        def f2():
+            l = local('f1local')
+            yield l
+        self.assertEquals('f1', compose(f1()).next())
 
-    def testFindClosesedLocal(self):
+    def testFindClosestLocal(self):
         def f1():
             myLocal = 'f1'
             yield f2()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/weightless/core/compose/_compose.c version_1/weightless/core/compose/_compose.c
--- version_0/weightless/core/compose/_compose.c	2011-02-22 14:41:17.000000000 +0100
+++ version_1/weightless/core/compose/_compose.c	2011-05-20 15:25:56.000000000 +0200
@@ -44,6 +44,7 @@
     PyObject** messages_start;
     PyObject** messages_end;
     PyObject*  sidekick;
+    PyFrameObject* frame;
     PyObject*  weakreflist;
 } PyComposeObject;
 
@@ -158,6 +159,7 @@
         Py_VISIT(*p);
 
     Py_VISIT(self->sidekick);
+    Py_VISIT(self->frame);
     return 0;
 }
 
@@ -175,6 +177,7 @@
     free(self->messages_base);
     self->messages_base = NULL;
     Py_CLEAR(self->sidekick);
+    Py_CLEAR(self->frame);
     return 0;
 }
 
@@ -198,6 +201,8 @@
 }
 
 
+static PyCodeObject* py_code;
+
 static void _compose_initialize(PyComposeObject* cmps) {
     cmps->expect_data = 0;
     cmps->generators_allocated = INITIAL_STACK_SIZE;
@@ -208,6 +213,8 @@
     cmps->messages_end = cmps->messages_base;
     cmps->sidekick = NULL;
     cmps->weakreflist = NULL;
+    cmps->frame = PyFrame_New(PyThreadState_GET(), py_code, PyEval_GetGlobals(), NULL);
+    Py_CLEAR(cmps->frame->f_back);
 }
 
 
@@ -380,6 +387,21 @@
 }
 
 
+static PyObject* _compose_go_with_frame(PyComposeObject* self, PyObject* exc_type, PyObject* exc_value, PyObject* exc_tb) {
+    PyThreadState* tstate = PyThreadState_GET();
+    PyFrameObject* tstate_frame = tstate->frame;
+    self->frame->f_back = tstate_frame;
+    Py_INCREF(self->frame->f_back);
+    tstate->frame = self->frame;
+    *(self->frame->f_stacktop++) = (PyObject*) self;
+    PyObject* response = _compose_go(self, exc_type, exc_value, exc_tb);
+    self->frame->f_stacktop--;
+    Py_CLEAR(self->frame->f_back);
+    tstate->frame = tstate_frame;
+    return response;
+}
+
+
 static PyObject* compose_send(PyComposeObject* self, PyObject* message) {
     if(!self->expect_data && message != Py_None) {
         PyErr_SetString(PyExc_AssertionError, "Cannot accept data. First send None.");
@@ -391,7 +413,7 @@
     if(!self->expect_data && self->messages_start[0] != Py_None)
         messages_insert(self, Py_None);
 
-    return _compose_go(self, NULL, NULL, NULL);
+    return _compose_go_with_frame(self, NULL, NULL, NULL);
 }
 
 
@@ -406,13 +428,12 @@
         exc_type = PyExceptionInstance_Class(exc_type); // borrowed ref
     }
 
-    PyObject* r = _compose_go(self, exc_type, exc_value, exc_tb);
-    return r;
+    return _compose_go_with_frame(self, exc_type, exc_value, exc_tb);
 }
 
 
 static PyObject* compose_close(PyComposeObject* self) {
-    _compose_go(self, PyExc_GeneratorExit, NULL, NULL);
+    _compose_go_with_frame(self, PyExc_GeneratorExit, NULL, NULL);
 
     if(PyErr_ExceptionMatches(PyExc_StopIteration) || PyErr_ExceptionMatches(PyExc_GeneratorExit)) {
         PyErr_Clear();	/* ignore these errors */
@@ -422,7 +443,6 @@
     return NULL;
 }
 
-
 static void compose_del(PyObject* self) {
     if(!compose_close((PyComposeObject*) self))
         PyErr_WriteUnraisable(self);
@@ -475,9 +495,14 @@
                 Py_INCREF(localVar);
                 return localVar;
             }
+        }
+    }
 
-            if(localVar->ob_type == &PyCompose_Type)
-                return find_local_in_compose((PyComposeObject*)localVar, name);
+    if(frame->f_stacktop > frame->f_valuestack) {
+        PyObject* o = frame->f_stacktop[-1];
+
+        if(o->ob_type == &PyCompose_Type) {
+            return find_local_in_compose((PyComposeObject*) o, name);
         }
     }
 
@@ -645,6 +670,26 @@
 
 ////////// Module initialization //////////
 
+static PyCodeObject* create_empty_code(void) {
+    PyObject* py_srcfile = PyString_FromString(__FILE__);
+    PyObject* py_funcname = PyString_FromString("compose");
+    PyObject* empty_string = PyString_FromString("");
+    PyObject* empty_tuple = PyTuple_New(0);
+    PyCodeObject* code = PyCode_New(
+                             0, 0, 1, 0,  // stacksize is 1
+                             empty_string,
+                             empty_tuple,
+                             empty_tuple,
+                             empty_tuple,
+                             empty_tuple,
+                             empty_tuple,
+                             py_srcfile,
+                             py_funcname,
+                             __LINE__,
+                             empty_string);
+    return code;
+}
+
 PyMODINIT_FUNC init_compose_c(void) {
     PyObject* linecache = PyImport_ImportModule("linecache"); // new ref
 
@@ -669,9 +714,19 @@
         return;
     }
 
+    py_code = create_empty_code();
+
+    if(!py_code) {
+        Py_CLEAR(linecache);
+        Py_CLEAR(py_getline);
+        PyErr_Print();
+        return;
+    }
+
     if(PyType_Ready(&PyCompose_Type) < 0) {
         Py_CLEAR(linecache);
         Py_CLEAR(py_getline);
+        Py_CLEAR(py_code);
         PyErr_Print();
         return;
     }
@@ -681,6 +736,7 @@
     if(!module) {
         Py_CLEAR(linecache);
         Py_CLEAR(py_getline);
+        Py_CLEAR(py_code);
         PyErr_Print();
         return;
     }
