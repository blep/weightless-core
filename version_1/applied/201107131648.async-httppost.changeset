Changeset created on Wed Jul 13 16:48:10 CEST 2011 by Seek You Too

Description: Add asynchronous HTTP POST support.

    HTTP GET and POST are now both supported by _httprequest.py.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.5.2.3-Seecr/version_0

diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/http/asyncreadertest.py version_0-async-httppost/test/http/asyncreadertest.py
--- version_0/test/http/asyncreadertest.py	2011-07-13 16:28:06.000000000 +0200
+++ version_0-async-httppost/test/http/asyncreadertest.py	2011-07-13 16:28:01.000000000 +0200
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Weightless is a High Performance Asynchronous Networking Library
@@ -28,15 +29,22 @@
 import sys
 from StringIO import StringIO
 from traceback import format_exception
+from time import sleep
 from socket import socket, gaierror as SocketGaiError
 from random import randint
+from cq2utils import CallTrace
 from httpreadertest import server as testserver
-from weightless.http import HttpServer, httpget, Suspend
+from weightless.http import HttpServer, httpget, httppost, Suspend
 from weightless.io import Reactor
 from weightless.core import compose
 
-from weightless.http._httpget import _httpRequest
-from weightless.http import _httpget as httpGetModule
+from weightless.http._httprequest import _httpRequest
+from weightless.http import _httprequest as httpRequestModule
+
+from threading import Thread
+
+from BaseHTTPServer import BaseHTTPRequestHandler
+from SocketServer import TCPServer
 
 def clientget(host, port, path):
     client = socket()
@@ -47,7 +55,7 @@
 fileDict = {
     '__file__': clientget.func_code.co_filename,
     'suspend.py': Suspend.__call__.func_code.co_filename,
-    'httpget.py': httpget.func_code.co_filename,
+    'httprequest.py': httpget.func_code.co_filename,
 }
  
 class AsyncReaderTest(BaseTestCase):
@@ -63,9 +71,10 @@
         self.httpserver.listen()
     
     def testHttpRequest(self):
-        self.assertEquals('GET / HTTP/1.0\r\n', _httpRequest('/'))
-        self.assertEquals('GET / HTTP/1.1\r\nHost: weightless.io\r\n', _httpRequest('/', vhost="weightless.io"))
-
+        self.assertEquals('GET / HTTP/1.0\r\n', _httpRequest('GET', '/', headers={}))
+        self.assertEquals('POST / HTTP/1.0\r\n', _httpRequest('POST', '/', headers={}))
+        self.assertEquals('GET / HTTP/1.1\r\n', _httpRequest('GET', '/', headers={'Host': "weightless.io"}))
+        self.assertEquals('POST / HTTP/1.1\r\n', _httpRequest('POST', '/', headers={'Host': "weightless.io"}))
 
     def testPassRequestThruToBackOfficeServer(self):
         done = [False]
@@ -107,11 +116,11 @@
         expectedTraceback = ignoreLineNumbers("""Traceback (most recent call last):
   File "%(__file__)s", line 85, in failingserver
     response = yield httpget(*target)
-  File "%(httpget.py)s", line 78, in httpget
+  File "%(httprequest.py)s", line 78, in httpget
     result = s.getResult()
   File "%(suspend.py)s", line 34, in __call__
     self._doNext(self)
-  File "%(httpget.py)s", line 35, in doGet
+  File "%(httprequest.py)s", line 35, in _do
     sok.connect((host, port))
   File "<string>", line 1, in connect
 TypeError: an integer is required
@@ -174,8 +183,8 @@
             raise RuntimeError("Boom!")
 
         try:
-            originalHttpRequest = httpGetModule._httpRequest
-            httpGetModule._httpRequest = httpRequest
+            originalHttpRequest = httpRequestModule._httpRequest
+            httpRequestModule._httpRequest = httpRequest
 
             clientget('localhost', self.port, '/')
             while not exceptions:
@@ -184,10 +193,12 @@
             expectedTraceback = ignoreLineNumbers("""Traceback (most recent call last):
   File "%(__file__)s", line 144, in failingserver
     response = yield httpget(*target)
-  File "%(httpget.py)s", line 80, in httpget
+  File "%(httprequest.py)s", line 80, in httpget
     result = s.getResult()
-  File "%(httpget.py)s", line 51, in doGet
-    sok.send('%%s\\r\\n' %% _httpRequest(request, vhost=vhost))
+  File "%(httprequest.py)s", line 51, in _do
+    _sendHttpHeaders(sok, method, request, headers)
+  File "../weightless/http/_httprequest.py", line 82, in _sendHttpHeaders
+    sok.send(_httpRequest(method, request, headers))
   File "%(__file__)s", line 150, in httpRequest
     raise RuntimeError("Boom!")
 RuntimeError: Boom!""" % fileDict)
@@ -195,7 +206,83 @@
             self.assertEqualsWS(expectedTraceback, ignoreLineNumbers(resultingTraceback))
 
         finally:
-            httpGetModule._httpRequest = originalHttpRequest
+            httpRequestModule._httpRequest = originalHttpRequest
+
+    def testPost(self):
+        post_request = []
+        port = self.port + 1
+        simpleServer(port, post_request)
+
+        body = u"BÃ–DY" * 20000
+        done = []
+        def posthandler(*args, **kwargs):
+            request = kwargs['RequestURI']
+            response = yield httppost('localhost', port, '/path', body, 
+                    headers={'Content-Type': 'text/plain', 'Content-Length': len(body)}
+            )
+            yield response
+            done.append(response)
+        self.handler = posthandler
+        clientget('localhost', self.port, '/')
+        while not done:
+            self.reactor.step()
+
+        self.assertTrue("POST RESPONSE" in done[0], done[0])
+        self.assertEquals('POST', post_request[0]['command'])
+        self.assertEquals('/path', post_request[0]['path'])
+        headers = post_request[0]['headers'].headers
+        self.assertEquals(['Content-Length: 100000\r\n', 'Content-Type: text/plain\r\n'], headers)
+        self.assertEquals(body, post_request[0]['body'])
+
+    def testGet(self):
+        get_request = []
+        port = self.port + 1
+        simpleServer(port, get_request)
+
+        done = []
+        def gethandler(*args, **kwargs):
+            request = kwargs['RequestURI']
+            response = yield httpget('localhost', port, '/path',  
+                    headers={'Content-Type': 'text/plain', 'Content-Length': 0}
+            )
+            yield response
+            done.append(response)
+        self.handler = gethandler
+        clientget('localhost', self.port, '/')
+        while not done:
+            self.reactor.step()
+
+        self.assertTrue("GET RESPONSE" in done[0], done[0])
+        self.assertEquals('GET', get_request[0]['command'])
+        self.assertEquals('/path', get_request[0]['path'])
+        headers = get_request[0]['headers'].headers
+        self.assertEquals(['Content-Length: 0\r\n', 'Content-Type: text/plain\r\n'], headers)
+        
+def simpleServer(port, request):
+    def server():
+        class Handler(BaseHTTPRequestHandler):
+            def log_message(*args, **kwargs):
+                pass
+
+            def do_GET(self, *args, **kwargs):
+                request.append({
+                    'command': self.command,
+                    'path': self.path,
+                    'headers': self.headers})
+                self.send_response(200, "GET RESPONSE")
+
+            def do_POST(self, *args, **kwargs):
+                request.append({
+                    'command': self.command,
+                    'path': self.path,
+                    'headers': self.headers,
+                    'body': self.rfile.read()})
+                self.send_response(200, "POST RESPONSE")
+
+        httpd = TCPServer(("", port), Handler)
+        httpd.serve_forever()
+    thread=Thread(None, server)
+    thread.start()
 
 
 def ignoreLineNumbers(s):
Only in version_0/weightless/http: _httpget.py
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/weightless/http/_httprequest.py version_0-async-httppost/weightless/http/_httprequest.py
--- version_0/weightless/http/_httprequest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_0-async-httppost/weightless/http/_httprequest.py	2011-07-13 16:28:05.000000000 +0200
@@ -0,0 +1,104 @@
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    See http://weightless.io
+#    Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from sys import exc_info, getdefaultencoding
+from weightless.http import Suspend
+from weightless.core import identify
+from socket import socket, error as SocketError, SOL_SOCKET, SO_ERROR, SHUT_WR, SHUT_RD
+from errno import EINPROGRESS
+
+@identify
+def _do(method, host, port, request, body=None, headers=None):
+    this = yield # this generator, from @identify
+    suspend = yield # suspend object, from Suspend.__call__
+    sok = socket()
+    sok.setblocking(0)
+    #sok.settimeout(1.0)
+    try:
+        sok.connect((host, port))
+    except SocketError, (errno, msg):
+        if errno != EINPROGRESS:
+            raise
+    suspend._reactor.addWriter(sok, this.next)
+    yield
+    try:
+        err = sok.getsockopt(SOL_SOCKET, SO_ERROR)
+        if err != 0:    # connection created succesfully?
+            raise IOError(err)
+        yield
+        suspend._reactor.removeWriter(sok)
+        # error checking
+        if body:
+            data = body
+            if type(data) is unicode:
+                data = data.encode(getdefaultencoding())
+            headers.update({'Content-Length': len(data)})
+        _sendHttpHeaders(sok, method, request, headers)
+        if body:
+            sentBytes = 0
+            suspend._reactor.addWriter(sok, this.next)
+            while data != "":
+                size = sok.send(data)
+                data = data[size:]
+                yield
+            suspend._reactor.removeWriter(sok)
+        sok.shutdown(SHUT_WR)
+        #sok.shutdown(WRITER)
+        suspend._reactor.addReader(sok, this.next)
+        responses = []
+        while True:
+            yield
+            response = sok.recv(4096) # error checking
+            if response == '':
+                break
+            responses.append(response)
+        suspend._reactor.removeReader(sok)
+        #sok.shutdown(READER)
+        sok.close()
+        suspend.resume(''.join(responses))
+    except Exception, e:
+        suspend.throw(*exc_info())
+    yield
+
+def _httpRequest(method, request, headers):
+    httpVersion = '1.1' if headers and 'Host' in headers else '1.0'
+    return "%s %s HTTP/%s\r\n" % (method, request, httpVersion)
+    
+def _sendHttpHeaders(sok, method, request, headers):
+    sok.send(_httpRequest(method, request, headers))
+    if headers:
+        sok.send(''.join('%s: %s\r\n' % i for i in headers.items()))
+    sok.send('\r\n')
+
+def httpget(host, port, request, headers=None):
+    s = Suspend(_do('GET', host, port, request, headers=headers).send)
+    yield s
+    result = s.getResult()
+    raise StopIteration(result)
+
+def httppost(host, port, request, body, headers=None):
+    s = Suspend(_do('POST', host, port, request, body, headers=headers).send)
+    yield s
+    result = s.getResult()
+    raise StopIteration(result)
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/weightless/http/__init__.py version_0-async-httppost/weightless/http/__init__.py
--- version_0/weightless/http/__init__.py	2011-07-13 16:28:06.000000000 +0200
+++ version_0-async-httppost/weightless/http/__init__.py	2011-07-13 16:28:05.000000000 +0200
@@ -27,4 +27,4 @@
 from _httpreader import HttpReader
 from _httpserver import HttpServer, HttpsServer
 from _acceptor import Acceptor
-from _httpget import httpget
+from _httprequest import httpget, httppost
