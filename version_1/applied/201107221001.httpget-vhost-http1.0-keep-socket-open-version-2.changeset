Changeset created on Fri Jul 22 10:01:21 CEST 2011 by Seecr

Description: httpget fix wrt keeping socket open + not suggesting support for http 1.1

    Ran into a server that stopped responding after httpget sent SHUT_WR, so no longer doing that.
    Also: got chunked response that we don't actually support. Replacing HTTP 1.1 reference with HTTP 1.0 results in unchunked response.
    Also: vhost is now deprecated. Request can be used instead to use full request URI i.s.o a path.

    This changeset obsoletes '201107141522.httpget-vhost-http1.0-keep-socket-open.changeset'

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.6-seecr/version_2

Only in ../workingsets/0.6-seecr/version_2: build
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified ../workingsets/0.6-seecr/version_2/test/http/asyncreadertest.py version_0.6.2/test/http/asyncreadertest.py
--- ../workingsets/0.6-seecr/version_2/test/http/asyncreadertest.py	2011-07-15 09:09:31.000000000 +0200
+++ version_0.6.2/test/http/asyncreadertest.py	2011-07-22 10:01:12.000000000 +0200
@@ -77,10 +77,8 @@
         WeightlessTestCase.tearDown(self)
 
     def testHttpRequest(self):
-        self.assertEquals('GET / HTTP/1.0\r\n', _httpRequest('GET', '/', headers={}))
-        self.assertEquals('POST / HTTP/1.0\r\n', _httpRequest('POST', '/', headers={}))
-        self.assertEquals('GET / HTTP/1.1\r\n', _httpRequest('GET', '/', headers={'Host': "weightless.io"}))
-        self.assertEquals('POST / HTTP/1.1\r\n', _httpRequest('POST', '/', headers={'Host': "weightless.io"}))
+        self.assertEquals('GET / HTTP/1.0\r\n', _httpRequest('GET', '/'))
+        self.assertEquals('POST / HTTP/1.0\r\n', _httpRequest('POST', '/'))
 
     def testPassRequestThruToBackOfficeServer(self):
         done = [False]
@@ -204,7 +202,7 @@
   File "%(httprequest.py)s", line 51, in _do
     _sendHttpHeaders(sok, method, request, headers)
   File "../weightless/http/_httprequest.py", line 82, in _sendHttpHeaders
-    sok.send(_httpRequest(method, request, headers))
+    sok.send(_httpRequest(method, request))
   File "%(__file__)s", line 150, in httpRequest
     raise RuntimeError("Boom!")
 RuntimeError: Boom!""" % fileDict)
@@ -224,7 +222,7 @@
         def posthandler(*args, **kwargs):
             request = kwargs['RequestURI']
             response = yield httppost('localhost', port, '/path', body, 
-                    headers={'Content-Type': 'text/plain', 'Content-Length': len(body)}
+                    headers={'Content-Type': 'text/plain'}
             )
             yield response
             done.append(response)
@@ -263,7 +261,11 @@
         self.assertEquals('/path', get_request[0]['path'])
         headers = get_request[0]['headers'].headers
         self.assertEquals(['Content-Length: 0\r\n', 'Content-Type: text/plain\r\n'], headers)
-        
+
+    def testHttpGetWithVhost(self):
+        suspendObject = httpget("localhost", 9999, '/path', vhost="weightless.io").next()
+        self.assertEquals("http://weightless.io/path", suspendObject._doNext.__self__.gi_frame.f_locals["request"])
+
 def simpleServer(port, request):
     def server():
         class Handler(BaseHTTPRequestHandler):
@@ -282,7 +284,7 @@
                     'command': self.command,
                     'path': self.path,
                     'headers': self.headers,
-                    'body': self.rfile.read()})
+                    'body': self.rfile.read(int(self.headers["Content-Length"]))})
                 self.send_response(200, "POST RESPONSE")
 
         httpd = TCPServer(("", port), Handler)
@@ -290,7 +292,6 @@
     thread=Thread(None, server)
     thread.start()
 
-
 def ignoreLineNumbers(s):
     return sub("line \d+,", "line [#],", s)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified ../workingsets/0.6-seecr/version_2/weightless/http/_httprequest.py version_0.6.2/weightless/http/_httprequest.py
--- ../workingsets/0.6-seecr/version_2/weightless/http/_httprequest.py	2011-07-15 09:09:31.000000000 +0200
+++ version_0.6.2/weightless/http/_httprequest.py	2011-07-22 09:50:09.000000000 +0200
@@ -27,6 +27,7 @@
 from weightless.core import identify
 from socket import socket, error as SocketError, SOL_SOCKET, SO_ERROR, SHUT_WR, SHUT_RD
 from errno import EINPROGRESS
+from warnings import warn
 
 @identify
 def _do(method, host, port, request, body=None, headers=None):
@@ -34,7 +35,6 @@
     suspend = yield # suspend object, from Suspend.__call__
     sok = socket()
     sok.setblocking(0)
-    #sok.settimeout(1.0)
     try:
         sok.connect((host, port))
     except SocketError, (errno, msg):
@@ -64,8 +64,6 @@
                 data = data[size:]
                 yield
             suspend._reactor.removeWriter(sok)
-        sok.shutdown(SHUT_WR)
-        #sok.shutdown(WRITER)
         suspend._reactor.addReader(sok, this.next)
         responses = []
         while True:
@@ -75,24 +73,25 @@
                 break
             responses.append(response)
         suspend._reactor.removeReader(sok)
-        #sok.shutdown(READER)
         sok.close()
         suspend.resume(''.join(responses))
     except Exception, e:
         suspend.throw(*exc_info())
     yield
 
-def _httpRequest(method, request, headers):
-    httpVersion = '1.1' if headers and 'Host' in headers else '1.0'
-    return "%s %s HTTP/%s\r\n" % (method, request, httpVersion)
+def _httpRequest(method, request):
+    return "%s %s HTTP/1.0\r\n" % (method, request)
     
 def _sendHttpHeaders(sok, method, request, headers):
-    sok.send(_httpRequest(method, request, headers))
+    sok.send(_httpRequest(method, request))
     if headers:
         sok.send(''.join('%s: %s\r\n' % i for i in headers.items()))
     sok.send('\r\n')
 
-def httpget(host, port, request, headers=None):
+def httpget(host, port, request, headers=None, vhost=""):
+    if vhost != "":
+        warn("Vhost is deprectated. Use request instead with a full URI.", DeprecationWarning)
+        request = "http://%s%s" % (vhost, request)
     s = Suspend(_do('GET', host, port, request, headers=headers).send)
     yield s
     result = s.getResult()
