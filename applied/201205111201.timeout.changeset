Changeset created on Fri May 11 12:01:00 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Made use of timeouts during HTTP requests more consistent.

    Due to inconsistent use of timeout, a request sometimes timed out unexpectedly.  This has been solved.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.7.5-OAS/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/httpservertest.py /home/erik/dev/weightless/weightless-core/workingsets/0.7.5-OAS/version_1/test/http/httpservertest.py
--- version_0/test/http/httpservertest.py	2012-05-11 10:58:03.000000000 +0200
+++ version_1/test/http/httpservertest.py	2012-05-11 14:00:37.000000000 +0200
@@ -320,7 +320,7 @@
         self.assertEquals(oneStringLength * 6000, len(fragment))
         self.assertTrue("some t\xc3\xa9xt" in fragment, fragment)
 
-    def testInvalidRequestStartsOnlyOneTimer(self):
+    def testInvalidGETRequestStartsOnlyOneTimer(self):
         _httpserver.RECVSIZE = 3
         reactor = Reactor()
         timers = []
@@ -340,6 +340,34 @@
         self.assertEquals('HTTP/1.0 400 Bad Request\r\n\r\n', response)
         self.assertEquals(1, len(timers))
 
+    def testInvalidPOSTRequestStartsOnlyOneTimer(self):
+        # problem in found in OAS, timers not removed properly when whole body hasnt been read yet
+        _httpserver.RECVSIZE = 1
+        reactor = Reactor()
+        timers = []
+        orgAddTimer = reactor.addTimer
+        def addTimerInterceptor(*timer):
+            timers.append(timer)
+            return orgAddTimer(*timer)
+        reactor.addTimer = addTimerInterceptor
+        server = HttpServer(reactor, self.port, lambda **kwargs: (x for x in []), timeout=0.01)
+        server.listen()
+        sok = socket()
+        sok.connect(('localhost', self.port))
+        sok.send('POST / HTTP/1.0\r\nContent-Length: 10\r\n\r\n')
+        reactor.step()
+        sok.send(".")
+        sleep(0.1)
+        reactor.step()
+        sok.send(".")
+        reactor.step()
+        sleep(0.1)
+        while select([sok],[], [], 0) != ([sok], [], []):
+            reactor.step()
+        self.assertEquals(2, len(timers))
+
+
+
     def testInvalidRequestWithHalfHeader(self):
         reactor = Reactor()
         server = HttpServer(reactor, self.port, None, timeout=0.1)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/weightless/http/_httpserver.py /home/erik/dev/weightless/weightless-core/workingsets/0.7.5-OAS/version_1/weightless/http/_httpserver.py
--- version_0/weightless/http/_httpserver.py	2012-05-11 10:58:04.000000000 +0200
+++ version_1/weightless/http/_httpserver.py	2012-05-11 14:00:37.000000000 +0200
@@ -246,6 +246,7 @@
             self._badRequest()
             return
         self._dataBuffer += part
+        self._resetTimer()
         self._dealWithCall()
 
     def setCallDealer(self, aMethod):
@@ -255,12 +256,7 @@
     def _readHeaders(self):
         match = REGEXP.REQUEST.match(self._dataBuffer)
         if not match:
-            if not self._timer:
-                self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
             return # for more data
-        if self._timer:
-            self._reactor.removeTimer(self._timer)
-            self._timer = None
         self.request = match.groupdict()
         self.request['Body'] = ''
         self.request['Headers'] = parseHeaders(self.request['_headers'])
@@ -279,15 +275,14 @@
 
         if self._reactor.getOpenConnections() > self._maxConnections:
             self.request['ResponseCode'] = 503
-            self._finalize(self._errorHandler)
-        else:
+            return self._finalize(self._errorHandler)
+        if self.request['Method'] == 'POST':
             self.setCallDealer(self._readBody)
+        else:
+            self.finalize()
 
     def _readMultiForm(self, boundary):
         # TS: Compression & chunked mode not supported yet
-        if self._timer:
-            self._reactor.removeTimer(self._timer)
-            self._timer = None
         self._tempfile.write(self._dataBuffer)
 
         self._window += self._dataBuffer
@@ -316,8 +311,6 @@
             return
 
         self._dataBuffer= ''
-        if not self._timer:
-            self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
 
     def _processFilename(self, filename):
         parts = filename.split('\\')
@@ -325,59 +318,47 @@
             return filename
         return parts[-1]
 
+    def _resetTimer(self):
+        if self._timer:
+            self._reactor.removeTimer(self._timer)
+        self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
+
     def _readBody(self):
-        if self.request['Method'] == 'GET':
-            self.finalize()
-        elif self.request['Method'] == 'POST':
-            # Determine Content-Encoding in request, if any.
-            if self._decodeRequestBody is None and 'Content-Encoding' in self.request['Headers']:
-                contentEncoding = parseContentEncoding(self.request['Headers']['Content-Encoding'])
-                if len(contentEncoding) != 1 or contentEncoding[0] not in SUPPORTED_CONTENT_ENCODINGS:
-                    if self._timer:
-                        self._reactor.removeTimer(self._timer)
-                        self._timer = None
-                    self._badRequest()
-                    return
-                contentEncoding = contentEncoding[0]
-
-                self._decodeRequestBody = SUPPORTED_CONTENT_ENCODINGS[contentEncoding]['decode']()
-
-            # Not chunked
-            if 'Content-Length' in self.request['Headers']:
-                contentLength = int(self.request['Headers']['Content-Length'])
-
-                if len(self._dataBuffer) < contentLength:
-                    if not self._timer:
-                        self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
-                    return
-                if self._timer:
-                    self._reactor.removeTimer(self._timer)
-                    self._timer = None
-
-                if self._decodeRequestBody is not None:
-                    self.request['Body'] = self._decodeRequestBody.decompress(self._dataBuffer)
-                    self.request['Body'] += self._decodeRequestBody.flush()
-                else:
-                    self.request['Body'] = self._dataBuffer
-                self.finalize()
+        # Determine Content-Encoding in request, if any.
+        if self._decodeRequestBody is None and 'Content-Encoding' in self.request['Headers']:
+            contentEncoding = parseContentEncoding(self.request['Headers']['Content-Encoding'])
+            if len(contentEncoding) != 1 or contentEncoding[0] not in SUPPORTED_CONTENT_ENCODINGS:
+                self._badRequest()
+                return
+            contentEncoding = contentEncoding[0]
+
+            self._decodeRequestBody = SUPPORTED_CONTENT_ENCODINGS[contentEncoding]['decode']()
+
+        # Chunked - means HTTP/1.1
+        if 'Transfer-Encoding' in self.request['Headers'] and self.request['Headers']['Transfer-Encoding'] == 'chunked':
+            return self.setCallDealer(self._readChunk)
 
-            # Chunked - means HTTP/1.1
-            elif 'Transfer-Encoding' in self.request['Headers'] and self.request['Headers']['Transfer-Encoding'] == 'chunked':
-                self.setCallDealer(self._readChunk)
-            else:
-                self.finalize()
+        # Not chunked
+        if 'Content-Length' not in self.request['Headers']:
+            return self.finalize()
+
+        contentLength = int(self.request['Headers']['Content-Length'])
+
+        if len(self._dataBuffer) < contentLength:
+            return
+
+        if self._decodeRequestBody is not None:
+            self.request['Body'] = self._decodeRequestBody.decompress(self._dataBuffer)
+            self.request['Body'] += self._decodeRequestBody.flush()
         else:
-            self.finalize()
+            self.request['Body'] = self._dataBuffer
+
+        self.finalize()
 
     def _readChunk(self):
         match = REGEXP.CHUNK_SIZE_LINE.match(self._dataBuffer)
         if not match:
-            if not self._timer:
-                self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
             return # for more data
-        if self._timer:
-            self._reactor.removeTimer(self._timer)
-            self._timer = None
         self._chunkSize = int(match.groupdict()['ChunkSize'], 16)
         self._dataBuffer = self._dataBuffer[match.end():]
         self.setCallDealer(self._readChunkBody)
@@ -386,21 +367,16 @@
         if self._chunkSize == 0:
             if self._decodeRequestBody is not None:
                 self.request['Body'] += self._decodeRequestBody.flush()
-            self.finalize()
+            return self.finalize()
+
+        if len(self._dataBuffer) < self._chunkSize + CRLF_LEN:
+            return # for more data
+        if self._decodeRequestBody is not None:
+            self.request['Body'] += self._decodeRequestBody.decompress(self._dataBuffer[:self._chunkSize])
         else:
-            if len(self._dataBuffer) < self._chunkSize + CRLF_LEN:
-                if not self._timer:
-                    self._timer = self._reactor.addTimer(self._timeout, self._badRequest)
-                return # for more data
-            if self._timer:
-                self._reactor.removeTimer(self._timer)
-                self._timer = None
-            if self._decodeRequestBody is not None:
-                self.request['Body'] += self._decodeRequestBody.decompress(self._dataBuffer[:self._chunkSize])
-            else:
-                self.request['Body'] += self._dataBuffer[:self._chunkSize]
-            self._dataBuffer = self._dataBuffer[self._chunkSize + CRLF_LEN:]
-            self.setCallDealer(self._readChunk)
+            self.request['Body'] += self._dataBuffer[:self._chunkSize]
+        self._dataBuffer = self._dataBuffer[self._chunkSize + CRLF_LEN:]
+        self.setCallDealer(self._readChunk)
 
     def _determineContentEncoding(self):
         if 'Accept-Encoding' not in self.request['Headers']:
@@ -420,6 +396,8 @@
 
         self.request['Client'] = self._sok.getpeername()
         self._handler = finalizeMethod(**self.request)
+        if self._timer:
+            self._reactor.removeTimer(self._timer)
         self._reactor.removeReader(self._sok)
         self._reactor.addWriter(self._sok, self._writeResponse(encoding=encoding).next, prio=self._prio)
 
