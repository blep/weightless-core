Changeset created on Thu Dec 29 15:31:43 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Serverside UDP support 

    Can now open UDP sockets and listen for packets

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.6.4-Seecr2/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/_alltests.py version_1/test/_alltests.py
--- version_0/test/_alltests.py	2011-12-29 11:23:03.000000000 +0100
+++ version_1/test/_alltests.py	2011-12-29 16:31:33.000000000 +0100
@@ -53,6 +53,8 @@
 from http.suspendtest import SuspendTest
 from http.asyncreadertest import AsyncReaderTest
 
+from udp.acceptortest import AcceptorTest
+
 from core.observabletest import ObservableTest
 from core.observabledirectedmessagingtest import ObservableDirectedMessagingTest
 
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/udp/acceptortest.py version_1/test/udp/acceptortest.py
--- version_0/test/udp/acceptortest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/udp/acceptortest.py	2011-12-29 16:31:33.000000000 +0100
@@ -0,0 +1,119 @@
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    See http://weightless.io
+#    Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from unittest import TestCase
+from socket import socket, AF_INET, SOCK_DGRAM
+from calltrace import CallTrace
+from random import randint
+from os import system
+from subprocess import Popen, PIPE
+
+from weightless.udp import Acceptor
+
+class AcceptorTest(TestCase):
+
+    def testStartListening(self):
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, None)
+        self.assertEquals('addReader', reactor.calledMethods[0].name)
+        sok = reactor.calledMethods[0].args[0]
+        out = Popen(['netstat', '--numeric', '--listening', '--udp'], stdout=PIPE, stderr=PIPE).communicate()[0]
+        self.assertTrue(str(port) in out, out)
+        sok.close()
+        callback = reactor.calledMethods[0].args[1]
+        self.assertTrue(callable(callback))
+
+    def testHandle(self):
+        data = []
+        def sinkFactory(sock):
+            data.append(sock.recvfrom(2048))
+
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, sinkFactory)
+        self.assertEquals('addReader', reactor.calledMethods[0].name)
+        acceptCallback = reactor.calledMethods[0].args[1]
+        sok = socket(AF_INET, SOCK_DGRAM)
+        sok.sendto("TEST", ('localhost', port))
+        acceptCallback()
+        contents, remoteAddr = data[0]
+        self.assertEquals("TEST", contents)
+        sok.sendto("ANOTHER TEST", ('localhost', port))
+        acceptCallback()
+        self.assertEquals(2, len(data))
+        reactor.calledMethods[0].args[0].close()
+        sok.close()
+
+    def xxxtestCreateSink(self):
+        reactor = CallTrace('reactor')
+        port = randint(2**10, 2**16)
+        class sinkFactory(object):
+            def __init__(inner, *args, **kwargs): self.args, self.kwargs = args, kwargs
+        acceptor = Acceptor(reactor, port, sinkFactory)
+        acceptCallback = reactor.calledMethods[0].args[1]
+        sok = socket()
+        sok.connect(('localhost', port))
+        acceptCallback()
+        self.assertEquals('addReader', reactor.calledMethods[1].name)
+        sink = reactor.calledMethods[1].args[1]
+        self.assertEquals(socket, type(self.args[0]))
+        reactor.calledMethods[0].args[0].close()
+
+    def xxxtestReadData(self):
+        reactor = CallTrace('reactor')
+        port = randint(2**10, 2**16)
+        class sinkFactory(object):
+            def __init__(inner, *args, **kwargs):
+                self.args, self.kwargs = args, kwargs
+            def next(inner):
+                self.next = True
+        acceptor = Acceptor(reactor, port, sinkFactory)
+        acceptCallback = reactor.calledMethods[0].args[1]
+        sok = socket()
+        sok.connect(('localhost', port))
+        acceptCallback()
+        sink = reactor.calledMethods[1].args[1]
+        self.next = False
+        sink.next()
+        self.assertTrue(self.next)
+        reactor.calledMethods[0].args[0].close()
+
+    def xxxtestReuseAddress(self):
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, lambda sok: None)
+        client = socket()
+        client.connect(('127.0.0.1', port))
+        acceptor._accept()
+        acceptor.close()
+        acceptor = Acceptor(reactor, port, lambda sok: None)
+
+    def xxxtestAcceptorWithPrio(self):
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, lambda sok: None, prio=5)
+        client = socket()
+        client.connect(('127.0.0.1', port))
+        acceptor._accept()
+        self.assertEquals(5, reactor.calledMethods[0].kwargs['prio'])
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/weightless/udp/_acceptor.py version_1/weightless/udp/_acceptor.py
--- version_0/weightless/udp/_acceptor.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/weightless/udp/_acceptor.py	2011-12-29 16:31:33.000000000 +0100
@@ -0,0 +1,57 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    See http://weightless.io
+#    Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from socket import socket, SOL_SOCKET, SO_REUSEADDR, SO_LINGER, SOL_TCP, TCP_CORK, TCP_NODELAY, AF_INET, SOCK_DGRAM
+from struct import pack
+
+def createSocket(port):
+    sok = socket(AF_INET, SOCK_DGRAM)
+    sok.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
+    sok.setsockopt(SOL_SOCKET, SO_LINGER, pack('ii', 0, 0))
+    sok.bind(('0.0.0.0', port))
+    return sok
+
+class Acceptor(object):
+    """Listens on a port for incoming internet (TCP/IP) connections and calls a factory to create a handler for the new connection.  It does not use threads but a asynchronous reactor instead."""
+
+    def __init__(self, reactor, port, sinkFactory, prio=None, sok=None):
+        """The reactor is a user specified reactor for dispatching I/O events asynchronously. The sinkFactory is called with the newly created socket as its single argument. It is supposed to return a callable callback function that is called by the reactor when data is available."""
+
+        if sok == None:
+            sok = createSocket(port)
+
+        reactor.addReader(sok, self._handle, prio=prio)
+        self._sinkFactory = sinkFactory
+        self._sok = sok
+        self._reactor = reactor
+
+    def _handle(self):
+        self._sinkFactory(self._sok)
+
+    def close(self):
+        self._sok.close()
+
+    def shutdown(self):
+        self._reactor.removeReader(self._sok)
+        self.close()
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/weightless/udp/__init__.py version_1/weightless/udp/__init__.py
--- version_0/weightless/udp/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/weightless/udp/__init__.py	2011-12-29 16:31:33.000000000 +0100
@@ -0,0 +1,25 @@
+## begin license ##
+#
+#    Weightless is a High Performance Asynchronous Networking Library
+#    See http://weightless.io
+#    Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Weightless
+#
+#    Weightless is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Weightless is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Weightless; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from _acceptor import Acceptor
