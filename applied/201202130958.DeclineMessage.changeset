Changeset created on Mon Feb 13 09:58:27 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Introducing DeclineMessage

    Introduced DeclineMessage to make transparent behaviour more 
    explicit for the situation that none of the observers respond
    to a message.
    (This replaces the "unknown-calling-unknown considered transparent"
    behaviour, wich turned out to be too implicit and complicated).

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.7.0.1-DeclineMessage/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/core/observabletest.py /newroot/home/tom/repositories/work/weightless/weightless-core/workingsets/0.7.0.1-DeclineMessage/version_1/test/core/observabletest.py
--- version_0/test/core/observabletest.py	2012-02-13 08:59:05.144792313 +0100
+++ version_1/test/core/observabletest.py	2012-02-13 10:58:04.124791187 +0100
@@ -34,9 +34,10 @@
 from inspect import isframe, getframeinfo
 from types import GeneratorType
 from functools import partial
-from weightless.core import compose, Yield, Observable, Transparent, be, tostring, NoneOfTheObserversRespond
+from weightless.core import compose, Yield, Observable, Transparent, be, tostring, NoneOfTheObserversRespond, DeclineMessage
 from weightless.core._observable import AllMessage, AnyMessage, DoMessage, OnceMessage
 from unittest import TestCase
+from seecr.test import CallTrace
 
 
 class ObservableTest(TestCase):
@@ -858,8 +859,7 @@
                 return True
         self.assertTrue({'z':11, 'y':10} == {'z':11, 'y': Wildcard()})
 
-
-    def testUnknownReallyTransparentInCaseNoneOfTheObserversRespond(self):
+    def testTransparentInCaseNoneOfTheObserversRespond(self):
         root = be((Observable(),
             (Transparent(),),
             (Transparent(),
@@ -880,51 +880,6 @@
         except StopIteration, e:
             self.assertEquals((42,), e.args)
 
-    def testNoneOfTheObserversRespondNotPropagatedWhenNotIncomingAndOutgoingUnknown(self):
-        def assertNoneOfTheObserversRespond(clazz):
-            root = be((Observable(),
-                (clazz(),
-                    (Transparent(),
-                        (object(),)
-                    ),
-                ),
-                (Unreachable(),)
-            ))
-
-            try:
-                root.call.someCallMessage()
-                self.fail("Should have raised NoneOfTheObserversRespond")
-            except NoneOfTheObserversRespond, e:
-                self.assertEquals("None of the 1 observers respond to someCallMessage(...)", str(e))
-
-            try:
-                g = compose(root.any.someAnyMessage())
-                g.next()
-                self.fail("Should have raised NoneOfTheObserversRespond")
-            except NoneOfTheObserversRespond, e:
-                self.assertEquals("None of the 1 observers respond to someAnyMessage(...)", str(e))
-
-        class Message2Message(Observable):
-            def someAnyMessage(self, *args, **kwargs):
-                yield self.any.someAnyMessage(*args, **kwargs)
-            def someCallMessage(self, *args, **kwargs):
-                return self.call.someCallMessage(*args, **kwargs)
-        assertNoneOfTheObserversRespond(Message2Message)
-
-        class Message2Unknown(Observable):
-            def someAnyMessage(self, *args, **kwargs):
-                yield self.any.unknown('someAnyMessage', *args, **kwargs)
-            def someCallMessage(self, *args, **kwargs):
-                return self.call.unknown('someCallMessage', *args, **kwargs)
-        assertNoneOfTheObserversRespond(Message2Unknown)
-
-        class Unknown2Message(Observable):
-            def any_unknown(self, message, *args, **kwargs):
-                yield self.any.someAnyMessage(*args, **kwargs)
-            def call_unknown(self, message, *args, **kwargs):
-                return self.call.someCallMessage(*args, **kwargs)
-        assertNoneOfTheObserversRespond(Unknown2Message)
-
     def testObserverAttributeErrorNotIgnored(self):
         class GetAttr(object):
             def __init__(self, attrName):
@@ -954,18 +909,18 @@
         except AttributeError, e:
             self.assertEquals("'GetAttr' object has no attribute 'doesnotexist'", str(e))
 
-    def testNoneOfTheObserversRespondRaisedFromUnknown(self):
+    def testRaisingDeclineMessageResultsInCallOnNextObservable(self):
         class SemiTransparent(Observable):
             def call_unknown(self, message, *args, **kwargs):
                 if message == 'theMessage':
                     return self.call.unknown(message, *args, **kwargs)
-                raise NoneOfTheObserversRespond(message, unknownCall=True)
+                raise DeclineMessage
 
             def any_unknown(self, message, *args, **kwargs):
                 if message == 'theMessage':
                     value = yield self.any.unknown(message, *args, **kwargs)
                     raise StopIteration(value)
-                raise NoneOfTheObserversRespond(message, unknownCall=True)
+                raise DeclineMessage
         
         root = be((Observable(),
             (SemiTransparent(),
@@ -977,6 +932,48 @@
         self.assertEquals([42], list(compose(root.any.message())))
         self.assertEquals(42, root.call.anotherMessage())
 
+    def testRaisingDeclineMessageFromAllMakesNoDifference(self):
+        class SemiTransparent(Observable):
+            def all_unknown(self, message, *args, **kwargs):
+                if message == 'theMessage':
+                    yield self.all.unknown(message, *args, **kwargs)
+                raise DeclineMessage
+        
+        root = be((Observable(),
+            (SemiTransparent(),
+                (Responder(41),)
+            ),
+            (Responder(42),)
+        ))
+
+        self.assertEquals([41, 42], list(compose(root.all.theMessage())))
+        self.assertEquals([42], list(compose(root.all.message())))
+
+    def testRaisingDeclineMessageFromDoMakesNoDifference(self):
+        class SemiTransparent(Observable):
+            def do_unknown(self, message, *args, **kwargs):
+                if message == 'theMessage':
+                    self.do.unknown(message, *args, **kwargs)
+                raise DeclineMessage
+        
+        observer1 = CallTrace('observer1')
+        observer2 = CallTrace('observer2')
+        root = be((Observable(),
+            (SemiTransparent(),
+                (observer1,)
+            ),
+            (observer2,)
+        ))
+
+        root.do.theMessage()
+        self.assertEquals(['theMessage'], [m.name for m in observer1.calledMethods])
+        self.assertEquals(['theMessage'], [m.name for m in observer2.calledMethods])
+
+        observer1.calledMethods.reset()
+        observer2.calledMethods.reset()
+        root.do.message()
+        self.assertEquals([], [m.name for m in observer1.calledMethods])
+        self.assertEquals(['message'], [m.name for m in observer2.calledMethods])
 
     def assertFunctionsOnTraceback(self, *args):
         na, na, tb = exc_info()
@@ -1023,6 +1020,8 @@
         raise StopIteration(self._value)
     def call_unknown(self, message, *args, **kwargs):
         return self._value
+    def all_unknown(self, message, *args, **kwargs):
+        yield self._value
 
 class Unreachable(Observable):
     def any_unknown(self, message, *args, **kwargs):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/weightless/core/__init__.py /newroot/home/tom/repositories/work/weightless/weightless-core/workingsets/0.7.0.1-DeclineMessage/version_1/weightless/core/__init__.py
--- version_0/weightless/core/__init__.py	2012-02-13 08:59:06.892791844 +0100
+++ version_1/weightless/core/__init__.py	2012-02-13 10:58:04.728808528 +0100
@@ -35,5 +35,5 @@
 
 from compose import compose, local, tostring, Yield
 from utils import identify, autostart
-from _observable import Observable, Transparent, be, methodOrMethodPartialStr, NoneOfTheObserversRespond
+from _observable import Observable, Transparent, be, methodOrMethodPartialStr, NoneOfTheObserversRespond, DeclineMessage
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/weightless/core/_observable.py /newroot/home/tom/repositories/work/weightless/weightless-core/workingsets/0.7.0.1-DeclineMessage/version_1/weightless/core/_observable.py
--- version_0/weightless/core/_observable.py	2012-02-13 08:59:06.892791844 +0100
+++ version_1/weightless/core/_observable.py	2012-02-13 10:58:04.728808528 +0100
@@ -32,11 +32,28 @@
 
 
 class NoneOfTheObserversRespond(Exception):
-    def __init__(self, unansweredMessage, observers=None, unknownCall=False):
-        observers = observers or []
-        Exception.__init__(self, 'None of the %d observers respond to %s(...)' % (len(list(observers)), unansweredMessage))
-        self.unansweredMessage = unansweredMessage
-        self.unknownCall = unknownCall
+    """Must not be thrown anywhere outside of the Observable
+    implementation. It is exposed only so that it can be caught in 
+    specific components, typically to be able to opt out of some 
+    received message by raising DeclineMessage."""
+
+    def __init__(self, unansweredMessage, nrOfObservers):
+        Exception.__init__(self, 'None of the %d observers respond to %s(...)' % (nrOfObservers, unansweredMessage))
+
+
+class _DeclineMessage(Exception):
+    """Should be thrown by a component that wishes to opt out of a 
+    message received through 'any' or 'call' that it can't or doesn't
+    wish to handle after all.
+    
+    One reason might be that none of this components' observers responds
+    to the message after being 'forwarded' (as signalled by a 
+    NoneOfTheObserversRespond exception). For an example, please refer
+    to the code of Transparent below.
+    
+    The exception only ever needs a single instance. For convenience and
+    aesthetics this single instance is named as a class."""
+DeclineMessage = _DeclineMessage()
 
 
 class Defer(object):
@@ -57,35 +74,30 @@
 
     def unknown(self, message, *args, **kwargs):
         try:
-            return self._msgclass(self, message, unknownCall=True)(*args, **kwargs)
+            return self._msgclass(self, message)(*args, **kwargs)
         except:
             c, v, t = exc_info(); raise c, v, t.tb_next
 
 
 class MessageBase(object):
-    def __init__(self, defer, message, unknownCall=False):
+    def __init__(self, defer, message):
         self._defer = defer
         self._message = message
-        self._unknownCall = unknownCall
 
     def all(self, *args, **kwargs):
         for observer in self._defer.observers():
-            self.callingUnknown = False
             try: method = getattr(observer, self._message)
             except AttributeError:
                 try: 
                     method = partial(getattr(observer, self.altname), self._message)
-                    self.callingUnknown = True
                 except AttributeError:
                     continue 
             try:
                 result = method(*args, **kwargs)
                 self.verifyMethodResult(method, result)
                 _ = yield result
-            except NoneOfTheObserversRespond, e:
-                if self._concernsTransparentCall(e): 
-                    continue
-                c, v, t = exc_info(); raise c, v, t.tb_next
+            except _DeclineMessage:
+                continue
             except:
                 c, v, t = exc_info(); raise c, v, t.tb_next
             assert _ is None, "%s returned '%s'" % (methodOrMethodPartialStr(method), _)
@@ -96,23 +108,16 @@
                 try:
                     result = yield r
                     raise StopIteration(result)
-                except NoneOfTheObserversRespond, e:
-                    if self._concernsTransparentCall(e): 
-                        continue
-                    c, v, t = exc_info(); raise c, v, t.tb_next
+                except _DeclineMessage:
+                    continue
         except:
             c, v, t = exc_info(); raise c, v, t.tb_next
         raise NoneOfTheObserversRespond(
                 unansweredMessage=self._message, 
-                observers=self._defer.observers(),
-                unknownCall=self._unknownCall)
+                nrOfObservers=len(list(self._defer.observers())))
 
     def verifyMethodResult(self, method, result):
         assert isGeneratorOrComposed(result), "%s should have resulted in a generator." % methodOrMethodPartialStr(method)
-    
-    def _concernsTransparentCall(self, e):
-        return self.callingUnknown and e.unknownCall and e.unansweredMessage == self._message
-
 
 class AllMessage(MessageBase):
     altname = 'all_unknown'
@@ -214,19 +219,22 @@
         return "%s(name=%s)" % (self.__class__.__name__, repr(self._name))
 
 
-
-
 class Transparent(Observable):
     def all_unknown(self, message, *args, **kwargs):
         yield self.all.unknown(message, *args, **kwargs)
     def any_unknown(self, message, *args, **kwargs):
-        response = yield self.any.unknown(message, *args, **kwargs)
+        try:
+            response = yield self.any.unknown(message, *args, **kwargs)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
         raise StopIteration(response)
     def do_unknown(self, message, *args, **kwargs):
         self.do.unknown(message, *args, **kwargs)
     def call_unknown(self, message, *args, **kwargs):
-        return self.call.unknown(message, *args, **kwargs)
-
+        try:
+            return self.call.unknown(message, *args, **kwargs)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
 
 def be(strand):
     helicesDone = set()
