Changeset created on Wed May  4 10:06:41 CEST 2011 by Seek You Too

Description: Support unicode in HttpServer

    Some unicode strings could cause the httpserver to not sent all data. Unicode
    strings will now be encoded as strings using the systems default encoding.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/tags/version_0.5.0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.5.0/test/http/httpservertest.py version_0.5.1/test/http/httpservertest.py
--- version_0.5.0/test/http/httpservertest.py	2011-02-22 14:41:17.000000000 +0100
+++ version_0.5.1/test/http/httpservertest.py	2011-05-04 10:06:06.000000000 +0200
@@ -31,6 +31,8 @@
 from calltrace import CallTrace
 from basetestcase import MATCHALL
 from os.path import join, abspath, dirname
+from StringIO import StringIO
+import sys
 
 from weightless.http import HttpServer, _httpserver
 
@@ -107,7 +109,6 @@
         self.assertEquals('The Response', response)
 
     def testSmallFragmentsWhileSendingResponse(self):
-
         def response(**kwargs):
             yield 'some text that is longer than '
             yield 'the lenght of fragments sent'
@@ -130,6 +131,26 @@
         fragment = sok.recv(4096)
         self.assertEquals('some text that is longer than the lenght of fragments sent', fragment)
 
+    def testHttpServerEncodesUnicode(self):
+        unicodeString = u'some t\xe9xt' 
+        oneStringLength = len(str(unicodeString))
+        def response(**kwargs):
+            yield unicodeString * 6000
+        reactor = Reactor()
+        server = HttpServer(reactor, self._portNumber, response, recvSize=3)
+        server.listen()
+        sok = socket()
+        sok.connect(('localhost', self._portNumber))
+        sok.send('GET /path/here HTTP/1.0\r\nConnection: close\r\nApe-Nut: Mies\r\n\r\n')
+        while not reactor._writers:
+            reactor.step()
+        reactor.step()
+        fragment = sok.recv(100000) # will read about 49152 chars
+        reactor.step()
+        fragment += sok.recv(100000)
+        self.assertEquals(oneStringLength * 6000, len(fragment))
+        self.assertTrue("some t\xc3\xa9xt" in fragment, fragment)
+
     def testInvalidRequestStartsOnlyOneTimer(self):
         _httpserver.RECVSIZE = 3
         reactor = Reactor()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0.5.0/weightless/http/_httpserver.py version_0.5.1/weightless/http/_httpserver.py
--- version_0.5.0/weightless/http/_httpserver.py	2011-02-22 14:41:17.000000000 +0100
+++ version_0.5.1/weightless/http/_httpserver.py	2011-05-04 10:06:06.000000000 +0200
@@ -34,7 +34,7 @@
 from time import time
 from socket import socket, ssl,  SOL_SOCKET, SO_REUSEADDR, SO_LINGER
 from struct import pack
-from sys import stdout
+from sys import stdout, getdefaultencoding
 
 
 RECVSIZE = 4096
@@ -115,6 +115,7 @@
         self._window = ''
         self._maxConnections = maxConnections if maxConnections else maxFileDescriptors()
         self._errorHandler = errorHandler if errorHandler else defaultErrorHandler
+        self._defaultEncoding = getdefaultencoding()
 
     def __call__(self):
         part = self._sok.recv(self._recvSize)
@@ -279,6 +280,8 @@
                         yield
                         data.resumeWriter()
                         continue
+                    if type(data) is unicode:
+                        data = data.encode(self._defaultEncoding)
                 sent = self._sok.send(data, MSG_DONTWAIT)
                 if sent < len(data):
                     self._rest = data[sent:]
Binary files version_0.5.0/weightless/http/._httpserver.py.swp and version_0.5.1/weightless/http/._httpserver.py.swp differ
