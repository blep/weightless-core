Changeset created on Wed Aug 15 11:49:02 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Socket bind address can be set.

    The HttpsServer and HttpServer default bind to the address '0.0.0.0' and
    so listening to all incoming traffic. The address can now be set to
    a specific address, default has not changed.

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.7.7-ZP/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/http/acceptortest.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/test/http/acceptortest.py
--- version_0/test/http/acceptortest.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/test/http/acceptortest.py	2012-08-15 12:48:56.000000000 +0100
@@ -112,3 +112,16 @@
         client.connect(('127.0.0.1', port))
         acceptor._accept()
         self.assertEquals(5, reactor.calledMethods[0].kwargs['prio'])
+
+    def testBindAddress_DefaultsTo_0_0_0_0(self):
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, lambda sok: None, prio=5)
+        self.assertEquals(('0.0.0.0', port), acceptor._sok.getsockname())
+
+    def testBindAddressCustom(self):
+        reactor = CallTrace()
+        port = randint(2**10, 2**16)
+        acceptor = Acceptor(reactor, port, lambda sok: None, bindAddress='127.0.0.1', prio=5)
+        self.assertEquals(('127.0.0.1', port), acceptor._sok.getsockname())
+        
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/http/httpservertest.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/test/http/httpservertest.py
--- version_0/test/http/httpservertest.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/test/http/httpservertest.py	2012-08-15 12:48:56.000000000 +0100
@@ -93,6 +93,13 @@
         reactor.step() # call onRequest for response data
         self.assertEquals(True, self.req)
 
+    def testConnectBindAddress(self):
+        reactor = CallTrace()
+        server = HttpServer(reactor, self.port, lambda **kwargs: None, bindAddress='127.0.0.1')
+        server.listen()
+        self.assertEquals(('127.0.0.1', self.port), server._acceptor._sok.getsockname())
+
+
     def testSendHeader(self):
         self.kwargs = None
         def response(**kwargs):
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/http/httpsservertest.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/test/http/httpsservertest.py
--- version_0/test/http/httpsservertest.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/test/http/httpsservertest.py	2012-08-15 12:48:56.000000000 +0100
@@ -26,6 +26,7 @@
 
 from unittest import TestCase
 from random import randint
+from seecr.test import CallTrace
 
 from weightless.io import Reactor
 from weightless.http import HttpsServer
@@ -66,3 +67,10 @@
         reactor.step()
         self.assertEquals(1, len(popenStdout))
         self.assertEquals(serverResponse, popenStdout[0])
+
+    def testConnectBindAddress(self):
+        reactor = CallTrace()
+        port = randint(15000, 16000)
+        server = HttpsServer(reactor, port, lambda **kwargs: None, bindAddress='127.0.0.1', keyfile='ssl/server.pkey', certfile='ssl/server.cert')
+        self.assertEquals(('127.0.0.1', port), server._sok.getsockname())
+
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/io/giotest.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/test/io/giotest.py
--- version_0/test/io/giotest.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/test/io/giotest.py	2012-08-15 12:48:56.000000000 +0100
@@ -32,7 +32,7 @@
 
 from weightlesstestcase import WeightlessTestCase
 
-from weightless.io import Reactor, Acceptor, Gio, giopen
+from weightless.io import Reactor, Gio, giopen
 from weightless.io._gio import Context, SocketContext, Timer, TimeoutException
 
 class GioTest(WeightlessTestCase):
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/weightless/http/_acceptor.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/weightless/http/_acceptor.py
--- version_0/weightless/http/_acceptor.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/weightless/http/_acceptor.py	2012-08-15 12:48:56.000000000 +0100
@@ -27,22 +27,22 @@
 from socket import socket, SOL_SOCKET, SO_REUSEADDR, SO_LINGER, SOL_TCP, TCP_CORK, TCP_NODELAY
 from struct import pack
 
-def createSocket(port):
+def createSocket(port, bindAddress=None):
     sok = socket()
     sok.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
     sok.setsockopt(SOL_SOCKET, SO_LINGER, pack('ii', 0, 0))
-    sok.bind(('0.0.0.0', port))
+    sok.bind(('0.0.0.0' if bindAddress is None else bindAddress, port))
     sok.listen(127)
     return sok
 
 class Acceptor(object):
     """Listens on a port for incoming internet (TCP/IP) connections and calls a factory to create a handler for the new connection.  It does not use threads but a asynchronous reactor instead."""
 
-    def __init__(self, reactor, port, sinkFactory, prio=None, sok=None):
+    def __init__(self, reactor, port, sinkFactory, prio=None, sok=None, bindAddress=None):
         """The reactor is a user specified reactor for dispatching I/O events asynchronously. The sinkFactory is called with the newly created socket as its single argument. It is supposed to return a callable callback function that is called by the reactor when data is available."""
 
         if sok == None:
-            sok = createSocket(port)
+            sok = createSocket(port, bindAddress=bindAddress)
 
         reactor.addReader(sok, self._accept, prio=prio)
         self._sinkFactory = sinkFactory
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/weightless/http/_httpserver.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/weightless/http/_httpserver.py
--- version_0/weightless/http/_httpserver.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/weightless/http/_httpserver.py	2012-08-15 12:48:56.000000000 +0100
@@ -53,9 +53,10 @@
 
 class HttpServer(object):
     """Factory that creates a HTTP server listening on port, calling generatorFactory for each new connection.  When a client does not send a valid HTTP request, it is disconnected after timeout seconds. The generatorFactory is called with the HTTP Status and Headers as arguments.  It is expected to return a generator that produces the response -- including the Status line and Headers -- to be send to the client."""
-    def __init__(self, reactor, port, generatorFactory, timeout=1, recvSize=RECVSIZE, prio=None, sok=None, maxConnections=None, errorHandler=None, compressResponse=False):
+    def __init__(self, reactor, port, generatorFactory, timeout=1, recvSize=RECVSIZE, prio=None, sok=None, maxConnections=None, errorHandler=None, compressResponse=False, bindAddress=None):
         self._reactor = reactor
         self._port = port
+        self._bindAddress = bindAddress
         self._generatorFactory = generatorFactory
         self._timeout = timeout
         self._recvSize = recvSize
@@ -66,12 +67,23 @@
         self._compressResponse = compressResponse
 
     def listen(self):
-        self._acceptor = Acceptor(self._reactor, self._port, 
-                lambda sok: HttpHandler(self._reactor, sok, self._generatorFactory, self._timeout, 
-                    self._recvSize, prio=self._prio, maxConnections=self._maxConnections, 
+        self._acceptor = Acceptor(
+                self._reactor, 
+                self._port, 
+                lambda sok: HttpHandler(
+                    self._reactor, 
+                    sok, 
+                    self._generatorFactory, 
+                    self._timeout, 
+                    self._recvSize, 
+                    prio=self._prio, 
+                    maxConnections=self._maxConnections, 
                     errorHandler=self._errorHandler,
-                    compressResponse=self._compressResponse),
-                prio=self._prio, sok=self._sok)
+                    compressResponse=self._compressResponse
+                ),
+                prio=self._prio, 
+                sok=self._sok,
+                bindAddress=self._bindAddress)
 
 
     def setMaxConnections(self, m):
@@ -80,7 +92,7 @@
     def shutdown(self):
         self._acceptor.shutdown()
 
-def HttpsServer(reactor, port, generatorFactory, timeout=1, recvSize=RECVSIZE, prio=None, sok=None, maxConnections=None, errorHandler=None, compressResponse=False, certfile='', keyfile=''):
+def HttpsServer(reactor, port, generatorFactory, timeout=1, recvSize=RECVSIZE, prio=None, sok=None, maxConnections=None, errorHandler=None, compressResponse=False, certfile='', keyfile='', bindAddress=None):
     """Factory that creates a HTTP server listening on port, calling generatorFactory for each new connection.  When a client does not send a valid HTTP request, it is disconnected after timeout seconds. The generatorFactory is called with the HTTP Status and Headers as arguments.  It is expected to return a generator that produces the response -- including the Status line and Headers -- to be send to the client."""
     if sok == None:
         def verify_cb(conn, cert, errnum, depth, ok):
@@ -100,7 +112,7 @@
         sok = SSL.Connection(ctx, socket())
         sok.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
         sok.setsockopt(SOL_SOCKET, SO_LINGER, pack('ii', 0, 0))
-        sok.bind(('0.0.0.0', port))
+        sok.bind(('0.0.0.0' if bindAddress is None else bindAddress, port))
         sok.listen(127)
 
     return Acceptor(reactor, port, lambda s: HttpsHandler(reactor, s, generatorFactory, timeout, recvSize, prio=prio, maxConnections=maxConnections, errorHandler=errorHandler, compressResponse=compressResponse), prio=prio, sok=sok)
Only in version_0/weightless/io: _acceptor.py
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/weightless/io/__init__.py /home/zp/development/weightless/weightless-core/workingsets/0.7.7-ZP/version_1/weightless/io/__init__.py
--- version_0/weightless/io/__init__.py	2012-08-06 11:20:47.000000000 +0100
+++ version_1/weightless/io/__init__.py	2012-08-15 12:48:56.000000000 +0100
@@ -26,6 +26,5 @@
 from _reactor import Reactor, reactor
 from _suspend import Suspend
 
-from _acceptor import Acceptor
 from _gio import Gio, open as giopen, SocketContext, TimeoutException, Timer
 from _server import Server
