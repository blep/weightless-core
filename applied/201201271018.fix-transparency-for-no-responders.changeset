Changeset created on Fri Jan 27 10:18:26 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Fix transparency for "No Responders"

    Transparent behaviour for when there are "no responders" is fixed
    for any- and call-messages in Observable.
    (Transparency is strictly defined as one of the unknown methods
    passing the same message on with another unknown call.)

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.6.4-Seecr/version_1

Only in version_1/build: temp.linux-x86_64-2.6
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/core/composetest.py /home/weightless/development/weightless-core/workingsets/0.6.4-Seecr/version_2/test/core/composetest.py
--- version_1/test/core/composetest.py	2012-01-24 15:09:12.000000000 +0100
+++ version_2/test/core/composetest.py	2012-01-27 11:17:55.000000000 +0100
@@ -1043,6 +1043,16 @@
         try: f3().next()
         except StopIteration, e: self.assertEquals((4,5,6), e.args)
 
+    def testRaisStopIterationWithTupleValue(self):
+        def f0():
+            raise StopIteration((1, 2))
+            yield
+        def f1():
+            result = yield f0()
+            yield result
+        # Before fix C compose considered tuple elements as separate arguments to be passed into send()
+        self.assertEquals([(1,2)], list(compose(f1())))
+
     def testConcurrentFlow(self):
         def f():
             first_msg = yield
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/core/observabletest.py /home/weightless/development/weightless-core/workingsets/0.6.4-Seecr/version_2/test/core/observabletest.py
--- version_1/test/core/observabletest.py	2012-01-24 15:09:12.000000000 +0100
+++ version_2/test/core/observabletest.py	2012-01-27 11:17:55.000000000 +0100
@@ -35,11 +35,11 @@
 from types import GeneratorType
 from functools import partial
 from weightless.core import compose, Yield, Observable, Transparent, be, tostring
-from weightless.core._observable import AllMessage, AnyMessage, DoMessage, OnceMessage
+from weightless.core._observable import AllMessage, AnyMessage, DoMessage, OnceMessage, NoneOfTheObserversRespond
 from unittest import TestCase
 
-class ObservableTest(TestCase):
 
+class ObservableTest(TestCase):
     def testAllWithoutImplementers(self):
         observable = Observable()
         responses = observable.all.someMethodNobodyIsListeningTo()
@@ -133,7 +133,7 @@
                 return 42
             def all_unknown(self, message, *args, **kwargs):
                 return 42
-        root = be((Observable(), (A(),)))
+        root = be((Observable(), (Transparent(), (A(),))))
         g = compose(root.all.f())
         try:
             g.next()
@@ -141,6 +141,7 @@
         except AssertionError, e:
             self.assertTrue("<bound method A.f of <core.observabletest.A object at 0x" in str(e), str(e))
             self.assertTrue(">> should have resulted in a generator." in str(e), str(e))
+            self.assertFunctionsOnTraceback("testAllAssertsResultOfCallIsGeneratorOrComposed", "all_unknown", "verifyMethodResult")
 
         g = compose(root.all.undefinedMethod())
         try:
@@ -286,7 +287,7 @@
     def testAnyViaUnknown(self):
         class A(object):
             def any_unknown(self, message, *args, **kwargs):
-                raise StopIteration((message, args, kwargs),)
+                raise StopIteration((message, args, kwargs), )
                 yield
         root = be((Observable(), (A(),)))
         try: compose(root.any.f(1, a=2)).next()
@@ -417,9 +418,9 @@
         observable = Observable()
         try:
             answer = list(compose(observable.any.gimmeAnswer('please')))
-            self.fail('shoud raise AttributeError')
-        except AttributeError, e:
-            self.assertFunctionsOnTraceback("testProperErrorMessage", "__call__")
+            self.fail('should raise NoneOfTheObserversRespond')
+        except NoneOfTheObserversRespond, e:
+            self.assertFunctionsOnTraceback("testProperErrorMessage", "any")
             self.assertEquals('None of the 0 observers respond to gimmeAnswer(...)', str(e))
 
     def testProperErrorMessageWhenArgsDoNotMatch(self):
@@ -429,7 +430,7 @@
         observable.addObserver(YesObserver())
         try:
             answer = observable.call.yes()
-            self.fail('shoud raise AttributeError')
+            self.fail('should raise TypeError')
         except TypeError, e:
             self.assertEquals('yes() takes exactly 2 arguments (1 given)', str(e))
 
@@ -857,12 +858,109 @@
                 return True
         self.assertTrue({'z':11, 'y':10} == {'z':11, 'y': Wildcard()})
 
+
+    def testUnknownReallyTransparentInCaseNoneOfTheObserversRespond(self):
+        root = be((Observable(),
+            (Transparent(),),
+            (Transparent(),
+                (Transparent(),
+                   (object(),)
+                ),
+            ),
+            (Responder(42),),
+        ))
+
+        self.assertEquals(42, root.call.m())
+
+        try:
+            g = compose(root.any.m())
+            self.assertEquals(42, g.next())
+            g.next()
+            self.fail("Should have raised StopIteration")
+        except StopIteration, e:
+            self.assertEquals((42,), e.args)
+
+    def testNoneOfTheObserversRespondNotPropagatedWhenNotIncomingAndOutgoingUnknown(self):
+        def assertNoneOfTheObserversRespond(clazz):
+            root = be((Observable(),
+                (clazz(),
+                    (Transparent(),
+                        (object(),)
+                    ),
+                ),
+                (Unreachable(),)
+            ))
+
+            try:
+                root.call.someCallMessage()
+                self.fail("Should have raised NoneOfTheObserversRespond")
+            except NoneOfTheObserversRespond, e:
+                self.assertEquals("None of the 1 observers respond to someCallMessage(...)", str(e))
+
+            try:
+                g = compose(root.any.someAnyMessage())
+                g.next()
+                self.fail("Should have raised NoneOfTheObserversRespond")
+            except NoneOfTheObserversRespond, e:
+                self.assertEquals("None of the 1 observers respond to someAnyMessage(...)", str(e))
+
+        class Message2Message(Observable):
+            def someAnyMessage(self, *args, **kwargs):
+                yield self.any.someAnyMessage(*args, **kwargs)
+            def someCallMessage(self, *args, **kwargs):
+                return self.call.someCallMessage(*args, **kwargs)
+        assertNoneOfTheObserversRespond(Message2Message)
+
+        class Message2Unknown(Observable):
+            def someAnyMessage(self, *args, **kwargs):
+                yield self.any.unknown('someAnyMessage', *args, **kwargs)
+            def someCallMessage(self, *args, **kwargs):
+                return self.call.unknown('someCallMessage', *args, **kwargs)
+        assertNoneOfTheObserversRespond(Message2Unknown)
+
+        class Unknown2Message(Observable):
+            def any_unknown(self, message, *args, **kwargs):
+                yield self.any.someAnyMessage(*args, **kwargs)
+            def call_unknown(self, message, *args, **kwargs):
+                return self.call.someCallMessage(*args, **kwargs)
+        assertNoneOfTheObserversRespond(Unknown2Message)
+
+    def testObserverAttributeErrorNotIgnored(self):
+        class GetAttr(object):
+            def __init__(self, attrName):
+                self.attrName = attrName
+            def call_unknown(self, message, *args, **kwargs):
+                return getattr(self, self.attrName)
+            def any_unknown(self, message, *args, **kwargs):
+                raise StopIteration(getattr(self, self.attrName))
+                yield
+
+        root = be((Observable(),
+            (Transparent(),
+                (GetAttr('doesnotexist'),)
+            ),
+            (GetAttr('__class__'),)
+        ))
+    
+        try:
+            result = root.call.someMessage()
+            self.fail("should not get here: %s" % result)
+        except AttributeError, e:
+            self.assertEquals("'GetAttr' object has no attribute 'doesnotexist'", str(e))
+
+        try:
+            list(compose(root.any.someMessage()))
+            self.fail("should not get here")
+        except AttributeError, e:
+            self.assertEquals("'GetAttr' object has no attribute 'doesnotexist'", str(e))
+
+
     def assertFunctionsOnTraceback(self, *args):
         na, na, tb = exc_info()
         for functionName in args:
             self.assertEquals(functionName, tb.tb_frame.f_code.co_name)
             tb = tb.tb_next
-        self.assertEquals(None, tb)
+        self.assertEquals(None, tb, format_tb(tb))
 
     def get_tracked_objects(self):
         return [o for o in gc.get_objects() if type(o) in 
@@ -883,12 +981,28 @@
                 return repr(o)
         gc.collect()
         diff = set(self.get_tracked_objects()) - set(self._baseline)
-        #self.assertEquals(set(), diff)
-        #for obj in diff:
-        #    print "Leak:"
-        #    print tostr(obj)
-        #    print "Referrers:"
-        #    for o in  gc.get_referrers(obj):
-        #        print tostr(o)
+        self.assertEquals(set(), diff)
+        for obj in diff:
+            print "Leak:"
+            print tostr(obj)
+            print "Referrers:"
+            for o in gc.get_referrers(obj):
+                print tostr(o)
         del self._baseline
+        gc.collect()
+
+
+class Responder(Observable):
+    def __init__(self, value):
+        self._value = value
+    def any_unknown(self, message, *args, **kwargs):
+        yield self._value
+        raise StopIteration(self._value)
+    def call_unknown(self, message, *args, **kwargs):
+        return self._value
+
+class Unreachable(Observable):
+    def any_unknown(self, message, *args, **kwargs):
+        raise Exception("should not get here")
+        yield
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/weightless/core/compose/_compose.c /home/weightless/development/weightless-core/workingsets/0.6.4-Seecr/version_2/weightless/core/compose/_compose.c
--- version_1/weightless/core/compose/_compose.c	2012-01-24 15:09:12.000000000 +0100
+++ version_2/weightless/core/compose/_compose.c	2012-01-27 11:17:55.000000000 +0100
@@ -372,7 +372,7 @@
 
         } else { // normal message
             message = messages_next(self); // new ref
-            response = PyObject_CallMethod(generator, "send", "O", message); // new ref
+            response = PyObject_CallMethod(generator, "send", "(O)", message); // new ref
             Py_CLEAR(message);
         }
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/weightless/core/_observable.py /home/weightless/development/weightless-core/workingsets/0.6.4-Seecr/version_2/weightless/core/_observable.py
--- version_1/weightless/core/_observable.py	2012-01-24 15:09:12.000000000 +0100
+++ version_2/weightless/core/_observable.py	2012-01-27 11:17:55.000000000 +0100
@@ -26,12 +26,16 @@
 ## end license ##
 
 from sys import exc_info
-from weightless.core import local
 from functools import partial
+
 from weightless.core.compose import isGeneratorOrComposed
 
-NORESPONDERS = 'None of the %d observers respond to %s(...)'
 
+class NoneOfTheObserversRespond(Exception):
+    def __init__(self, unansweredMessage, observers, unknownCall):
+        Exception.__init__(self, 'None of the %d observers respond to %s(...)' % (len(list(observers)), unansweredMessage))
+        self.unansweredMessage = unansweredMessage
+        self.unknownCall = unknownCall
 
 class Defer(object):
     def __init__(self, observable, msgclass, filter=bool):
@@ -47,85 +51,107 @@
 
     def __getitem__(self, target):
         return Defer(self._observable, self._msgclass,
-                lambda o: hasattr(o, "observable_name") and o.observable_name() == target)
+                filter=lambda o: hasattr(o, "observable_name") and o.observable_name() == target)
 
     def unknown(self, message, *args, **kwargs):
         try:
-            return getattr(self, message)(*args, **kwargs)
+            return self._msgclass(self, message, unknownCall=True)(*args, **kwargs)
         except:
-            c, v, t = exc_info()
-            raise c, v, t.tb_next
+            c, v, t = exc_info(); raise c, v, t.tb_next
 
-class AllMessage(object):
-    altname = 'all_unknown'
-    assertGeneratorResult = True
-    assertNoneResult = False
 
-    def __init__(self, defer, message):
+class MessageBase(object):
+    def __init__(self, defer, message, unknownCall=False):
         self._defer = defer
         self._message = message
+        self._unknownCall = unknownCall
 
-    def __call__(self, *args, **kwargs):
+    def all(self, *args, **kwargs):
         for observer in self._defer.observers():
+            self.callingUnknown = False
             try: method = getattr(observer, self._message)
             except AttributeError:
-                try: method = partial(getattr(observer, self.altname), self._message)
+                try: 
+                    method = partial(getattr(observer, self.altname), self._message)
+                    self.callingUnknown = True
                 except AttributeError:
                     continue 
             try:
                 result = method(*args, **kwargs)
-            except:
-                c, v, t = exc_info()
-                raise c, v, t.tb_next
-
-            if self.assertGeneratorResult:
-                assert isGeneratorOrComposed(result), "%s should have resulted in a generator." % methodOrMethodPartialStr(method)
-            elif self.assertNoneResult:
-                assert result is None, "%s returned '%s'" % (methodOrMethodPartialStr(method), result)
-
-            try:
+                self.verifyMethodResult(method, result)
                 _ = yield result
+            except NoneOfTheObserversRespond, e:
+                if self._concernsTransparentCall(e): 
+                    continue
+                c, v, t = exc_info(); raise c, v, t.tb_next
             except:
-                c, v, t = exc_info()
-                raise c, v, t.tb_next
+                c, v, t = exc_info(); raise c, v, t.tb_next
             assert _ is None, "%s returned '%s'" % (methodOrMethodPartialStr(method), _)
 
-class AnyMessage(AllMessage):
-    altname = 'any_unknown'
-    assertGeneratorResult = True
-
-    def __call__(self, *args, **kwargs):
+    def any(self, *args, **kwargs):
         try:
-            for r in AllMessage.__call__(self, *args, **kwargs):
-                return r
+            for r in self.all(*args, **kwargs):
+                try:
+                    result = yield r
+                    raise StopIteration(result)
+                except NoneOfTheObserversRespond, e:
+                    if self._concernsTransparentCall(e): 
+                        continue
+                    c, v, t = exc_info(); raise c, v, t.tb_next
         except:
-            c, v, t = exc_info()
-            raise c, v, t.tb_next
-        raise AttributeError(NORESPONDERS % (len(list(self._defer.observers())), self._message))
+            c, v, t = exc_info(); raise c, v, t.tb_next
+        raise NoneOfTheObserversRespond(
+                unansweredMessage=self._message, 
+                observers=self._defer.observers(),
+                unknownCall=self._unknownCall)
+
+    def verifyMethodResult(self, method, result):
+        assert isGeneratorOrComposed(result), "%s should have resulted in a generator." % methodOrMethodPartialStr(method)
+    
+    def _concernsTransparentCall(self, e):
+        return self.callingUnknown and e.unknownCall and e.unansweredMessage == self._message
+
+
+class AllMessage(MessageBase):
+    altname = 'all_unknown'
+    __call__ = MessageBase.all
+
+class AnyMessage(MessageBase):
+    altname = 'any_unknown'
+    __call__ = MessageBase.any
 
 class CallMessage(AnyMessage):
-    assertGeneratorResult = False
     altname = 'call_unknown'
 
-class DoMessage(AllMessage):
+    def call(self, *args, **kwargs):
+        try:
+            return self.any(*args, **kwargs).next()
+        except:
+            c, v, t = exc_info(); raise c, v, t.tb_next
+    __call__ = call
+
+    def verifyMethodResult(self, method, result):
+        pass
+
+class DoMessage(MessageBase):
     altname = 'do_unknown'
-    assertGeneratorResult = False
-    assertNoneResult = True
 
-    def __call__(self, *args, **kwargs):
+    def do(self, *args, **kwargs):
         try:
-            for _ in AllMessage.__call__(self, *args, **kwargs):
+            for _ in self.all(*args, **kwargs):
                 pass
         except:
-            c, v, t = exc_info()
-            raise c, v, t.tb_next
+            c, v, t = exc_info(); raise c, v, t.tb_next
+    __call__ = do
 
-class OnceMessage(AllMessage):
-    assertGeneratorResult = False
+    def verifyMethodResult(self, method, result):
+        assert result is None, "%s returned '%s'" % (methodOrMethodPartialStr(method), result)
 
-    def __call__(self, *args, **kwargs):
+class OnceMessage(MessageBase):
+    def once(self, *args, **kwargs):
         done = set()
         return self._callonce(self._defer.observers(), args, kwargs, done)
+    __call__ = once
 
     def _callonce(self, observers, args, kwargs, done):
         for observer in (o for o in observers if o not in done):
