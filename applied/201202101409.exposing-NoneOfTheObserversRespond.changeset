Changeset created on Fri Feb 10 14:09:33 UTC 2012 by Seecr (Seek You Too B.V.)

Description: NoneOfTheObserversRespond exposed

    It turned out to be necessary to be able to raise NoneOfTheObserversRespond instances (with unknownCall=True) from 'unknown' implementations that for some reason can't process a particular message after all (specific example: 'FilterMessages' in meresco-components).

Baseline version: https://weightless.svn.sourceforge.net/svnroot/weightless/weightless-core/workingsets/0.7-Seecr/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/core/observabletest.py /home/jurjanpaul/development/sf/weightless/weightless-core/workingsets/0.7-Seecr/version_1/test/core/observabletest.py
--- version_0/test/core/observabletest.py	2012-02-10 14:33:48.000000000 +0100
+++ version_1/test/core/observabletest.py	2012-02-10 15:08:31.000000000 +0100
@@ -34,8 +34,8 @@
 from inspect import isframe, getframeinfo
 from types import GeneratorType
 from functools import partial
-from weightless.core import compose, Yield, Observable, Transparent, be, tostring
-from weightless.core._observable import AllMessage, AnyMessage, DoMessage, OnceMessage, NoneOfTheObserversRespond
+from weightless.core import compose, Yield, Observable, Transparent, be, tostring, NoneOfTheObserversRespond
+from weightless.core._observable import AllMessage, AnyMessage, DoMessage, OnceMessage
 from unittest import TestCase
 
 
@@ -954,6 +954,29 @@
         except AttributeError, e:
             self.assertEquals("'GetAttr' object has no attribute 'doesnotexist'", str(e))
 
+    def testNoneOfTheObserversRespondRaisedFromUnknown(self):
+        class SemiTransparent(Observable):
+            def call_unknown(self, message, *args, **kwargs):
+                if message == 'theMessage':
+                    return self.call.unknown(message, *args, **kwargs)
+                raise NoneOfTheObserversRespond(message, unknownCall=True)
+
+            def any_unknown(self, message, *args, **kwargs):
+                if message == 'theMessage':
+                    value = yield self.any.unknown(message, *args, **kwargs)
+                    raise StopIteration(value)
+                raise NoneOfTheObserversRespond(message, unknownCall=True)
+        
+        root = be((Observable(),
+            (SemiTransparent(),
+                (Responder(41),)
+            ),
+            (Responder(42),)
+        ))
+
+        self.assertEquals([42], list(compose(root.any.message())))
+        self.assertEquals(42, root.call.anotherMessage())
+
 
     def assertFunctionsOnTraceback(self, *args):
         na, na, tb = exc_info()
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/weightless/core/__init__.py /home/jurjanpaul/development/sf/weightless/weightless-core/workingsets/0.7-Seecr/version_1/weightless/core/__init__.py
--- version_0/weightless/core/__init__.py	2012-02-10 14:33:48.000000000 +0100
+++ version_1/weightless/core/__init__.py	2012-02-10 15:08:31.000000000 +0100
@@ -35,5 +35,5 @@
 
 from compose import compose, local, tostring, Yield
 from utils import identify, autostart
-from _observable import Observable, Transparent, be, methodOrMethodPartialStr
+from _observable import Observable, Transparent, be, methodOrMethodPartialStr, NoneOfTheObserversRespond
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/weightless/core/_observable.py /home/jurjanpaul/development/sf/weightless/weightless-core/workingsets/0.7-Seecr/version_1/weightless/core/_observable.py
--- version_0/weightless/core/_observable.py	2012-02-10 14:33:48.000000000 +0100
+++ version_1/weightless/core/_observable.py	2012-02-10 15:08:31.000000000 +0100
@@ -32,11 +32,13 @@
 
 
 class NoneOfTheObserversRespond(Exception):
-    def __init__(self, unansweredMessage, observers, unknownCall):
+    def __init__(self, unansweredMessage, observers=None, unknownCall=False):
+        observers = observers or []
         Exception.__init__(self, 'None of the %d observers respond to %s(...)' % (len(list(observers)), unansweredMessage))
         self.unansweredMessage = unansweredMessage
         self.unknownCall = unknownCall
 
+
 class Defer(object):
     def __init__(self, observable, msgclass, filter=bool):
         self._observable = observable
@@ -212,6 +214,8 @@
         return "%s(name=%s)" % (self.__class__.__name__, repr(self._name))
 
 
+
+
 class Transparent(Observable):
     def all_unknown(self, message, *args, **kwargs):
         yield self.all.unknown(message, *args, **kwargs)
