Changeset created on Thu Jan 24 11:04:15 UTC 2013 by Seecr (Seek You Too B.V.)

Description: UDP Acceptor modified to follow same sinkFactory protocol as used in the TCP sinkFactory

    The sinkFactory provided should be a function that takes a socket object and returns a function
    that will be called when data is available on that socket. By following the same protocol as the 
    (TCP) Acceptor class in weightless.core.http, the same server code can work with both (with as little
    conditional code as possible) to support both TCP and UDP endpoints.

Baseline version: 0.8

From 5820d9f39301c6d4ba1ead05a16cf35aaab266e7 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 24 Jan 2013 12:01:26 +0100
Subject: [PATCH] JPM: UDP Acceptor modified to follow same sinkFactory protocol as used in the (http) TCP Acceptor

---
 test/udp/acceptortest.py    |   88 ++++++++++--------------------------------
 weightless/udp/_acceptor.py |   51 +++++++++++--------------
 2 files changed, 44 insertions(+), 95 deletions(-)

diff --git a/test/udp/acceptortest.py b/test/udp/acceptortest.py
index d5b69b2..dbf8d03 100644
--- a/test/udp/acceptortest.py
+++ b/test/udp/acceptortest.py
@@ -1,43 +1,42 @@
 ## begin license ##
-# 
-# "Weightless" is a High Performance Asynchronous Networking Library. See http://weightless.io 
-# 
+#
+# "Weightless" is a High Performance Asynchronous Networking Library. See http://weightless.io
+#
 # Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+#
 # This file is part of "Weightless"
-# 
+#
 # "Weightless" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
-# 
+#
 # "Weightless" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with "Weightless"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
 ## end license ##
 
 from unittest import TestCase
 from socket import socket, AF_INET, SOCK_DGRAM
 from seecr.test import CallTrace
 from random import randint
-from os import system
 from subprocess import Popen, PIPE
 
 from weightless.udp import Acceptor
 
-class UdpAcceptorTest(TestCase):
 
+class UdpAcceptorTest(TestCase):
     def testStartListening(self):
         reactor = CallTrace()
         port = randint(2**10, 2**16)
-        acceptor = Acceptor(reactor, port, None)
+        Acceptor(reactor, port, lambda sok: lambda: None)
         self.assertEquals('addReader', reactor.calledMethods[0].name)
         sok = reactor.calledMethods[0].args[0]
         out = Popen(['netstat', '--numeric', '--listening', '--udp'], stdout=PIPE, stderr=PIPE).communicate()[0]
@@ -49,73 +48,28 @@ class UdpAcceptorTest(TestCase):
     def testHandle(self):
         data = []
         def sinkFactory(sock):
-            data.append(sock.recvfrom(2048))
-
+            def handle():
+                data.append(sock.recvfrom(2048))
+            return handle
         reactor = CallTrace()
         port = randint(2**10, 2**16)
-        acceptor = Acceptor(reactor, port, sinkFactory)
+        Acceptor(reactor, port, sinkFactory)
         self.assertEquals('addReader', reactor.calledMethods[0].name)
-        acceptCallback = reactor.calledMethods[0].args[1]
+        handleCallback = reactor.calledMethods[0].args[1]
         sok = socket(AF_INET, SOCK_DGRAM)
         sok.sendto("TEST", ('localhost', port))
-        acceptCallback()
+        handleCallback()
         contents, remoteAddr = data[0]
         self.assertEquals("TEST", contents)
         sok.sendto("ANOTHER TEST", ('localhost', port))
-        acceptCallback()
+        handleCallback()
         self.assertEquals(2, len(data))
         reactor.calledMethods[0].args[0].close()
         sok.close()
 
-    def xxxtestCreateSink(self):
-        reactor = CallTrace('reactor')
-        port = randint(2**10, 2**16)
-        class sinkFactory(object):
-            def __init__(inner, *args, **kwargs): self.args, self.kwargs = args, kwargs
-        acceptor = Acceptor(reactor, port, sinkFactory)
-        acceptCallback = reactor.calledMethods[0].args[1]
-        sok = socket()
-        sok.connect(('localhost', port))
-        acceptCallback()
-        self.assertEquals('addReader', reactor.calledMethods[1].name)
-        sink = reactor.calledMethods[1].args[1]
-        self.assertEquals(socket, type(self.args[0]))
-        reactor.calledMethods[0].args[0].close()
-
-    def xxxtestReadData(self):
-        reactor = CallTrace('reactor')
-        port = randint(2**10, 2**16)
-        class sinkFactory(object):
-            def __init__(inner, *args, **kwargs):
-                self.args, self.kwargs = args, kwargs
-            def next(inner):
-                self.next = True
-        acceptor = Acceptor(reactor, port, sinkFactory)
-        acceptCallback = reactor.calledMethods[0].args[1]
-        sok = socket()
-        sok.connect(('localhost', port))
-        acceptCallback()
-        sink = reactor.calledMethods[1].args[1]
-        self.next = False
-        sink.next()
-        self.assertTrue(self.next)
-        reactor.calledMethods[0].args[0].close()
-
-    def xxxtestReuseAddress(self):
-        reactor = CallTrace()
-        port = randint(2**10, 2**16)
-        acceptor = Acceptor(reactor, port, lambda sok: None)
-        client = socket()
-        client.connect(('127.0.0.1', port))
-        acceptor._accept()
-        acceptor.close()
-        acceptor = Acceptor(reactor, port, lambda sok: None)
-
-    def xxxtestAcceptorWithPrio(self):
+    def testAcceptorWithPrio(self):
         reactor = CallTrace()
         port = randint(2**10, 2**16)
-        acceptor = Acceptor(reactor, port, lambda sok: None, prio=5)
-        client = socket()
-        client.connect(('127.0.0.1', port))
-        acceptor._accept()
+        Acceptor(reactor, port, lambda sok: None, prio=5)
+        self.assertEquals('addReader', reactor.calledMethods[0].name)
         self.assertEquals(5, reactor.calledMethods[0].kwargs['prio'])
diff --git a/weightless/udp/_acceptor.py b/weightless/udp/_acceptor.py
index 75a9320..591c9c3 100644
--- a/weightless/udp/_acceptor.py
+++ b/weightless/udp/_acceptor.py
@@ -1,55 +1,42 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-# 
-# "Weightless" is a High Performance Asynchronous Networking Library. See http://weightless.io 
-# 
+#
+# "Weightless" is a High Performance Asynchronous Networking Library. See http://weightless.io
+#
 # Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+#
 # This file is part of "Weightless"
-# 
+#
 # "Weightless" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
-# 
+#
 # "Weightless" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with "Weightless"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
 ## end license ##
 
-from socket import socket, SOL_SOCKET, SO_REUSEADDR, SO_LINGER, SOL_TCP, TCP_CORK, TCP_NODELAY, AF_INET, SOCK_DGRAM
+from socket import socket, SOL_SOCKET, SO_REUSEADDR, SO_LINGER, AF_INET, SOCK_DGRAM
 from struct import pack
 
-def createSocket(port):
-    sok = socket(AF_INET, SOCK_DGRAM)
-    sok.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
-    sok.setsockopt(SOL_SOCKET, SO_LINGER, pack('ii', 0, 0))
-    sok.bind(('0.0.0.0', port))
-    return sok
 
 class Acceptor(object):
-    """Listens on a port for incoming internet (TCP/IP) connections and calls a factory to create a handler for the new connection.  It does not use threads but a asynchronous reactor instead."""
+    """Listens on a port for incoming UDP packets and calls a factory to create a handler for it.  It does not use threads but a asynchronous reactor instead."""
 
     def __init__(self, reactor, port, sinkFactory, prio=None, sok=None):
-        """The reactor is a user specified reactor for dispatching I/O events asynchronously. The sinkFactory is called with the newly created socket as its single argument. It is supposed to return a callable callback function that is called by the reactor when data is available."""
-
-        if sok == None:
-            sok = createSocket(port)
-
-        reactor.addReader(sok, self._handle, prio=prio)
-        self._sinkFactory = sinkFactory
-        self._sok = sok
+        """The reactor is a user specified reactor for dispatching I/O events asynchronously. The sinkFactory is called with the socket as its single argument. It is supposed to return a callable callback function that is called by the reactor when data is available."""
         self._reactor = reactor
-
-    def _handle(self):
-        self._sinkFactory(self._sok)
+        self._sok = sok or createSocket(port)
+        sink = sinkFactory(self._sok)
+        reactor.addReader(self._sok, sink, prio=prio)
 
     def close(self):
         self._sok.close()
@@ -57,3 +44,11 @@ class Acceptor(object):
     def shutdown(self):
         self._reactor.removeReader(self._sok)
         self.close()
+
+
+def createSocket(port):
+    sok = socket(AF_INET, SOCK_DGRAM)
+    sok.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
+    sok.setsockopt(SOL_SOCKET, SO_LINGER, pack('ii', 0, 0))
+    sok.bind(('0.0.0.0', port))
+    return sok
-- 
1.7.2.5

